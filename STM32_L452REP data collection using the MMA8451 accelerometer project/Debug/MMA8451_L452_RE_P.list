
MMA8451_L452_RE_P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b08  08007b08  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b10  08007b10  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000060  08007b78  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08007b78  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f10  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0e  00000000  00000000  00036fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00039cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff7  00000000  00000000  0003b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024921  00000000  00000000  0003c12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b6d  00000000  00000000  00060a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de5d1  00000000  00000000  000795bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c24  00000000  00000000  00157b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0015d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007898 	.word	0x08007898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007898 	.word	0x08007898

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <EnableFastRead>:
#include "MMA8451.h"

// helper functions

void EnableFastRead(I2C_HandleTypeDef hi2c)
{
 800058c:	b084      	sub	sp, #16
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af04      	add	r7, sp, #16
 8000594:	f107 0c10 	add.w	ip, r7, #16
 8000598:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// enable the F_READ bit in CR1 for 8 Bit Resolution Read

	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	222a      	movs	r2, #42	; 0x2a
 80005ae:	2138      	movs	r1, #56	; 0x38
 80005b0:	f107 0010 	add.w	r0, r7, #16
 80005b4:	f003 f866 	bl	8003684 <HAL_I2C_Mem_Read>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <EnableFastRead+0x36>
	  {
	      Error_Handler();
 80005be:	f001 f9ef 	bl	80019a0 <Error_Handler>
	  }

	  content |= 2;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	71fb      	strb	r3, [r7, #7]

	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	222a      	movs	r2, #42	; 0x2a
 80005de:	2138      	movs	r1, #56	; 0x38
 80005e0:	f107 0010 	add.w	r0, r7, #16
 80005e4:	f002 ff3a 	bl	800345c <HAL_I2C_Mem_Write>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <EnableFastRead+0x66>
	  {
	      Error_Handler();
 80005ee:	f001 f9d7 	bl	80019a0 <Error_Handler>
	  }
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr

08000600 <_12bit_to_16bit_c2_representation>:

void _12bit_to_16bit_c2_representation(int16_t * a)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
      // memorize the sign bit of your variable

	  uint16_t sign = (*a) & 0x8000;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060e:	b29b      	uxth	r3, r3
 8000610:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000618:	81fb      	strh	r3, [r7, #14]

	  // if the number is negative, do the following

	  if(sign == 0x8000)
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000620:	d149      	bne.n	80006b6 <_12bit_to_16bit_c2_representation+0xb6>
	  {

	  // turn your number into 1's complement and then into size&sign representations (the last 4 bits don't matter)

	  (*a) = (*a) - 0x0010;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000628:	b29b      	uxth	r3, r3
 800062a:	3b10      	subs	r3, #16
 800062c:	b29b      	uxth	r3, r3
 800062e:	b21a      	sxth	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	801a      	strh	r2, [r3, #0]

	  (*a) = (~(*a));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063a:	43db      	mvns	r3, r3
 800063c:	b21a      	sxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	801a      	strh	r2, [r3, #0]

      // clear the MSB ( the sign bit )

	  (*a) &= (~0x8000);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064c:	b21a      	sxth	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	801a      	strh	r2, [r3, #0]

      // move the bits of your number 4 digits to the right

	  (*a) = (*a) >> 4;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	111b      	asrs	r3, r3, #4
 800065a:	b21a      	sxth	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	801a      	strh	r2, [r3, #0]

      //add back the sign of your variable

	  (*a) |= sign;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066a:	4313      	orrs	r3, r2
 800066c:	b21a      	sxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	801a      	strh	r2, [r3, #0]

      // revert back to 2's complement representation

    	  (*a) = (~(*a));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000678:	43db      	mvns	r3, r3
 800067a:	b21a      	sxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	801a      	strh	r2, [r3, #0]

    	  // clear and replace the sign bit just to be sure

    	  (*a) &= (~0x8000);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000686:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800068a:	b21a      	sxth	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	801a      	strh	r2, [r3, #0]
    	  (*a) |= sign;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800069a:	4313      	orrs	r3, r2
 800069c:	b21a      	sxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	801a      	strh	r2, [r3, #0]

    	  if((*a) != 0x8FFF)
    		  (*a) += 0x0001;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	801a      	strh	r2, [r3, #0]
	  // if the number is possitive, just move the bits 4 digits to the right

	  else

	  (*a) = (*a) >> 4;
}
 80006b4:	e006      	b.n	80006c4 <_12bit_to_16bit_c2_representation+0xc4>
	  (*a) = (*a) >> 4;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006bc:	111b      	asrs	r3, r3, #4
 80006be:	b21a      	sxth	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	801a      	strh	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <DisableFastRead>:

void DisableFastRead(I2C_HandleTypeDef hi2c)
{
 80006d0:	b084      	sub	sp, #16
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af04      	add	r7, sp, #16
 80006d8:	f107 0c10 	add.w	ip, r7, #16
 80006dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	222a      	movs	r2, #42	; 0x2a
 80006f2:	2138      	movs	r1, #56	; 0x38
 80006f4:	f107 0010 	add.w	r0, r7, #16
 80006f8:	f002 ffc4 	bl	8003684 <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <DisableFastRead+0x36>
		  {
			  Error_Handler();
 8000702:	f001 f94d 	bl	80019a0 <Error_Handler>
		  }

		  content &= (~2);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f023 0302 	bic.w	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	71fb      	strb	r3, [r7, #7]

		  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	222a      	movs	r2, #42	; 0x2a
 8000722:	2138      	movs	r1, #56	; 0x38
 8000724:	f107 0010 	add.w	r0, r7, #16
 8000728:	f002 fe98 	bl	800345c <HAL_I2C_Mem_Write>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <DisableFastRead+0x66>
		  {
			  Error_Handler();
 8000732:	f001 f935 	bl	80019a0 <Error_Handler>
	      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr

08000744 <ACTIVE>:

// mode-switch functions

void ACTIVE(I2C_HandleTypeDef hi2c)
{
 8000744:	b084      	sub	sp, #16
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af04      	add	r7, sp, #16
 800074c:	f107 0c10 	add.w	ip, r7, #16
 8000750:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2301      	movs	r3, #1
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	222a      	movs	r2, #42	; 0x2a
 8000766:	2138      	movs	r1, #56	; 0x38
 8000768:	f107 0010 	add.w	r0, r7, #16
 800076c:	f002 ff8a 	bl	8003684 <HAL_I2C_Mem_Read>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <ACTIVE+0x36>
	     {
	        Error_Handler();
 8000776:	f001 f913 	bl	80019a0 <Error_Handler>
	     }
	  content |= 1;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	71fb      	strb	r3, [r7, #7]
	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2301      	movs	r3, #1
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	222a      	movs	r2, #42	; 0x2a
 8000796:	2138      	movs	r1, #56	; 0x38
 8000798:	f107 0010 	add.w	r0, r7, #16
 800079c:	f002 fe5e 	bl	800345c <HAL_I2C_Mem_Write>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <ACTIVE+0x66>
	  {
	      Error_Handler();
 80007a6:	f001 f8fb 	bl	80019a0 <Error_Handler>
	  }
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b4:	b004      	add	sp, #16
 80007b6:	4770      	bx	lr

080007b8 <STANDBY>:

void STANDBY(I2C_HandleTypeDef hi2c)
{
 80007b8:	b084      	sub	sp, #16
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af04      	add	r7, sp, #16
 80007c0:	f107 0c10 	add.w	ip, r7, #16
 80007c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	222a      	movs	r2, #42	; 0x2a
 80007da:	2138      	movs	r1, #56	; 0x38
 80007dc:	f107 0010 	add.w	r0, r7, #16
 80007e0:	f002 ff50 	bl	8003684 <HAL_I2C_Mem_Read>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <STANDBY+0x36>
	     {
	        Error_Handler();
 80007ea:	f001 f8d9 	bl	80019a0 <Error_Handler>
	     }
	  content &= (~1);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f023 0301 	bic.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	71fb      	strb	r3, [r7, #7]
	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), CTRL_REG1, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	2301      	movs	r3, #1
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	222a      	movs	r2, #42	; 0x2a
 800080a:	2138      	movs	r1, #56	; 0x38
 800080c:	f107 0010 	add.w	r0, r7, #16
 8000810:	f002 fe24 	bl	800345c <HAL_I2C_Mem_Write>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <STANDBY+0x66>
	  {
	      Error_Handler();
 800081a:	f001 f8c1 	bl	80019a0 <Error_Handler>
	  }
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <_2g_range>:

// range set functions

void _2g_range(I2C_HandleTypeDef hi2c)
{
 800082c:	b084      	sub	sp, #16
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af04      	add	r7, sp, #16
 8000834:	f107 0c10 	add.w	ip, r7, #16
 8000838:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// set the first 2 bits in the XYZ_DATA_CFG to 00 for 2g range

	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	2301      	movs	r3, #1
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	220e      	movs	r2, #14
 800084e:	2138      	movs	r1, #56	; 0x38
 8000850:	f107 0010 	add.w	r0, r7, #16
 8000854:	f002 ff16 	bl	8003684 <HAL_I2C_Mem_Read>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_2g_range+0x36>
	  {
	      Error_Handler();
 800085e:	f001 f89f 	bl	80019a0 <Error_Handler>
	  }

	  content |= 0;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	71fb      	strb	r3, [r7, #7]

	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	220e      	movs	r2, #14
 8000878:	2138      	movs	r1, #56	; 0x38
 800087a:	f107 0010 	add.w	r0, r7, #16
 800087e:	f002 fded 	bl	800345c <HAL_I2C_Mem_Write>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <_2g_range+0x60>
	  {
	      Error_Handler();
 8000888:	f001 f88a 	bl	80019a0 <Error_Handler>
	  }
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000896:	b004      	add	sp, #16
 8000898:	4770      	bx	lr

0800089a <_4g_range>:

void _4g_range(I2C_HandleTypeDef hi2c)
{
 800089a:	b084      	sub	sp, #16
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	f107 0c10 	add.w	ip, r7, #16
 80008a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// set the first 2 bits in the XYZ_DATA_CFG to 01 for 4g range

	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	220e      	movs	r2, #14
 80008bc:	2138      	movs	r1, #56	; 0x38
 80008be:	f107 0010 	add.w	r0, r7, #16
 80008c2:	f002 fedf 	bl	8003684 <HAL_I2C_Mem_Read>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_4g_range+0x36>
	  {
	      Error_Handler();
 80008cc:	f001 f868 	bl	80019a0 <Error_Handler>
	  }

	  content |= 1;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	71fb      	strb	r3, [r7, #7]

	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2301      	movs	r3, #1
 80008ea:	220e      	movs	r2, #14
 80008ec:	2138      	movs	r1, #56	; 0x38
 80008ee:	f107 0010 	add.w	r0, r7, #16
 80008f2:	f002 fdb3 	bl	800345c <HAL_I2C_Mem_Write>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <_4g_range+0x66>
	  {
	      Error_Handler();
 80008fc:	f001 f850 	bl	80019a0 <Error_Handler>
	  }
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090a:	b004      	add	sp, #16
 800090c:	4770      	bx	lr

0800090e <_8g_range>:

void _8g_range(I2C_HandleTypeDef hi2c)
{
 800090e:	b084      	sub	sp, #16
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af04      	add	r7, sp, #16
 8000916:	f107 0c10 	add.w	ip, r7, #16
 800091a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// set the first 2 bits in the XYZ_DATA_CFG to 10 for 8g range

	  uint8_t content;
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	2301      	movs	r3, #1
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	220e      	movs	r2, #14
 8000930:	2138      	movs	r1, #56	; 0x38
 8000932:	f107 0010 	add.w	r0, r7, #16
 8000936:	f002 fea5 	bl	8003684 <HAL_I2C_Mem_Read>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_8g_range+0x36>
	  {
	      Error_Handler();
 8000940:	f001 f82e 	bl	80019a0 <Error_Handler>
	  }

	  content |= 0;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	71fb      	strb	r3, [r7, #7]

	  if( HAL_I2C_Mem_Write(&hi2c, (SLAVE_ADDR << 1), XYZ_DATA_CFG, 1, &content, 1, HAL_MAX_DELAY) != HAL_OK )
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	220e      	movs	r2, #14
 800095a:	2138      	movs	r1, #56	; 0x38
 800095c:	f107 0010 	add.w	r0, r7, #16
 8000960:	f002 fd7c 	bl	800345c <HAL_I2C_Mem_Write>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <_8g_range+0x60>
	  {
	      Error_Handler();
 800096a:	f001 f819 	bl	80019a0 <Error_Handler>
	  }
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <Reset_range>:

void Reset_range(I2C_HandleTypeDef hi2c)
{
 800097c:	b084      	sub	sp, #16
 800097e:	b580      	push	{r7, lr}
 8000980:	b092      	sub	sp, #72	; 0x48
 8000982:	af12      	add	r7, sp, #72	; 0x48
 8000984:	f107 0c08 	add.w	ip, r7, #8
 8000988:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	_2g_range(hi2c);
 800098c:	4668      	mov	r0, sp
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	2244      	movs	r2, #68	; 0x44
 8000994:	4619      	mov	r1, r3
 8000996:	f006 fb2f 	bl	8006ff8 <memcpy>
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a0:	f7ff ff44 	bl	800082c <_2g_range>
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ac:	b004      	add	sp, #16
 80009ae:	4770      	bx	lr

080009b0 <X_Read_8BitRes>:

// acceleration read functions

int8_t X_Read_8BitRes (I2C_HandleTypeDef hi2c)
{
 80009b0:	b084      	sub	sp, #16
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b094      	sub	sp, #80	; 0x50
 80009b6:	af12      	add	r7, sp, #72	; 0x48
 80009b8:	f107 0c10 	add.w	ip, r7, #16
 80009bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // enable the F_READ bit in CR1 for 8 Bit Resolution Read

      EnableFastRead(hi2c);
 80009c0:	4668      	mov	r0, sp
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2244      	movs	r2, #68	; 0x44
 80009c8:	4619      	mov	r1, r3
 80009ca:	f006 fb15 	bl	8006ff8 <memcpy>
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d4:	f7ff fdda 	bl	800058c <EnableFastRead>

	  // read the contents of the OUT_X_MSB register

	  int8_t x = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), OUT_X_MSB, 1, &x, 1, HAL_MAX_DELAY) != HAL_OK )
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2201      	movs	r2, #1
 80009ee:	2138      	movs	r1, #56	; 0x38
 80009f0:	f107 0010 	add.w	r0, r7, #16
 80009f4:	f002 fe46 	bl	8003684 <HAL_I2C_Mem_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <X_Read_8BitRes+0x52>
	  {
	  	  Error_Handler();
 80009fe:	f000 ffcf 	bl	80019a0 <Error_Handler>
	  }

	  // disable the F_READ bit in CR1

	  DisableFastRead(hi2c);
 8000a02:	4668      	mov	r0, sp
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	2244      	movs	r2, #68	; 0x44
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f006 faf4 	bl	8006ff8 <memcpy>
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a16:	f7ff fe5b 	bl	80006d0 <DisableFastRead>

	  return x;
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <Y_Read_8BitRes>:

int8_t Y_Read_8BitRes (I2C_HandleTypeDef hi2c)
{
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b094      	sub	sp, #80	; 0x50
 8000a32:	af12      	add	r7, sp, #72	; 0x48
 8000a34:	f107 0c10 	add.w	ip, r7, #16
 8000a38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // enable the F_READ bit in CR1 for 8 Bit Resolution Read

      EnableFastRead(hi2c);
 8000a3c:	4668      	mov	r0, sp
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2244      	movs	r2, #68	; 0x44
 8000a44:	4619      	mov	r1, r3
 8000a46:	f006 fad7 	bl	8006ff8 <memcpy>
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a50:	f7ff fd9c 	bl	800058c <EnableFastRead>

	  // read the contents of the OUT_Y_MSB register

	  int8_t y = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), OUT_Y_MSB, 1, &y, 1, HAL_MAX_DELAY) != HAL_OK )
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	2138      	movs	r1, #56	; 0x38
 8000a6c:	f107 0010 	add.w	r0, r7, #16
 8000a70:	f002 fe08 	bl	8003684 <HAL_I2C_Mem_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <Y_Read_8BitRes+0x52>
	  {
	  	  Error_Handler();
 8000a7a:	f000 ff91 	bl	80019a0 <Error_Handler>
	  }

	  // disable the F_READ bit in CR1

	  DisableFastRead(hi2c);
 8000a7e:	4668      	mov	r0, sp
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	2244      	movs	r2, #68	; 0x44
 8000a86:	4619      	mov	r1, r3
 8000a88:	f006 fab6 	bl	8006ff8 <memcpy>
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	f7ff fe1d 	bl	80006d0 <DisableFastRead>

	  return y;
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa4:	b004      	add	sp, #16
 8000aa6:	4770      	bx	lr

08000aa8 <Z_Read_8BitRes>:

int8_t Z_Read_8BitRes (I2C_HandleTypeDef hi2c)
{
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b094      	sub	sp, #80	; 0x50
 8000aae:	af12      	add	r7, sp, #72	; 0x48
 8000ab0:	f107 0c10 	add.w	ip, r7, #16
 8000ab4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // enable the F_READ bit in CR1 for 8 Bit Resolution Read

      EnableFastRead(hi2c);
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2244      	movs	r2, #68	; 0x44
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f006 fa99 	bl	8006ff8 <memcpy>
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000acc:	f7ff fd5e 	bl	800058c <EnableFastRead>

	  // read the contents of the OUT_Z_MSB register

	  int8_t z = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	71fb      	strb	r3, [r7, #7]
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), OUT_Z_MSB, 1, &z, 1, HAL_MAX_DELAY) != HAL_OK )
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	9302      	str	r3, [sp, #8]
 8000ada:	2301      	movs	r3, #1
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	2138      	movs	r1, #56	; 0x38
 8000ae8:	f107 0010 	add.w	r0, r7, #16
 8000aec:	f002 fdca 	bl	8003684 <HAL_I2C_Mem_Read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <Z_Read_8BitRes+0x52>
	  {
	  	  Error_Handler();
 8000af6:	f000 ff53 	bl	80019a0 <Error_Handler>
	  }

	  // disable the F_READ bit in CR1

	  DisableFastRead(hi2c);
 8000afa:	4668      	mov	r0, sp
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	2244      	movs	r2, #68	; 0x44
 8000b02:	4619      	mov	r1, r3
 8000b04:	f006 fa78 	bl	8006ff8 <memcpy>
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0e:	f7ff fddf 	bl	80006d0 <DisableFastRead>

	  return z;
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr

08000b24 <X_Read_12BitRes>:

int16_t X_Read_12BitRes (I2C_HandleTypeDef hi2c)
{
 8000b24:	b084      	sub	sp, #16
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af04      	add	r7, sp, #16
 8000b2c:	f107 0c10 	add.w	ip, r7, #16
 8000b30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	  // read the contents of the OUT_Y_MSB and OUT_Y_LSB registers

	  int16_t x = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	80fb      	strh	r3, [r7, #6]
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), OUT_X_MSB, 2, &x, 2, HAL_MAX_DELAY) != HAL_OK )
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	1dbb      	adds	r3, r7, #6
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2302      	movs	r3, #2
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2138      	movs	r1, #56	; 0x38
 8000b4c:	f107 0010 	add.w	r0, r7, #16
 8000b50:	f002 fd98 	bl	8003684 <HAL_I2C_Mem_Read>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <X_Read_12BitRes+0x3a>
	  {
	  	  Error_Handler();
 8000b5a:	f000 ff21 	bl	80019a0 <Error_Handler>
	  }

	  _12bit_to_16bit_c2_representation(&x);
 8000b5e:	1dbb      	adds	r3, r7, #6
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd4d 	bl	8000600 <_12bit_to_16bit_c2_representation>

	  return x;
 8000b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <Y_Read_12BitRes>:

int16_t Y_Read_12BitRes (I2C_HandleTypeDef hi2c)
{
 8000b78:	b084      	sub	sp, #16
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af04      	add	r7, sp, #16
 8000b80:	f107 0c10 	add.w	ip, r7, #16
 8000b84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	  // read the contents of the OUT_Y_MSB and OUT_Y_LSB registers

	  int16_t y = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	80fb      	strh	r3, [r7, #6]
	  if( HAL_I2C_Mem_Read(&hi2c, (SLAVE_ADDR << 1), OUT_Y_MSB, 2, &y, 2, HAL_MAX_DELAY) != HAL_OK )
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2302      	movs	r3, #2
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	2138      	movs	r1, #56	; 0x38
 8000ba0:	f107 0010 	add.w	r0, r7, #16
 8000ba4:	f002 fd6e 	bl	8003684 <HAL_I2C_Mem_Read>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <Y_Read_12BitRes+0x3a>
	  {
	  	  Error_Handler();
 8000bae:	f000 fef7 	bl	80019a0 <Error_Handler>
	  }

	  _12bit_to_16bit_c2_representation(&y);
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fd23 	bl	8000600 <_12bit_to_16bit_c2_representation>

	  return y;
 8000bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <Overturn_detection>:

// 1 - overturn is detected
// 2 - no overturn is detected

uint8_t Overturn_detection(I2C_HandleTypeDef hi2c, resolution re, range ra, margin m)
{
 8000bcc:	b084      	sub	sp, #16
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b094      	sub	sp, #80	; 0x50
 8000bd2:	af12      	add	r7, sp, #72	; 0x48
 8000bd4:	f107 0c10 	add.w	ip, r7, #16
 8000bd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(ra == _2g) _2g_range(hi2c);
 8000bdc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10c      	bne.n	8000bfe <Overturn_detection+0x32>
 8000be4:	4668      	mov	r0, sp
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	2244      	movs	r2, #68	; 0x44
 8000bec:	4619      	mov	r1, r3
 8000bee:	f006 fa03 	bl	8006ff8 <memcpy>
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf8:	f7ff fe18 	bl	800082c <_2g_range>
 8000bfc:	e01c      	b.n	8000c38 <Overturn_detection+0x6c>
	else if (ra == _4g) _4g_range(hi2c);
 8000bfe:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d10c      	bne.n	8000c20 <Overturn_detection+0x54>
 8000c06:	4668      	mov	r0, sp
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2244      	movs	r2, #68	; 0x44
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f006 f9f2 	bl	8006ff8 <memcpy>
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1a:	f7ff fe3e 	bl	800089a <_4g_range>
 8000c1e:	e00b      	b.n	8000c38 <Overturn_detection+0x6c>
	else _8g_range(hi2c);
 8000c20:	4668      	mov	r0, sp
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	2244      	movs	r2, #68	; 0x44
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f006 f9e5 	bl	8006ff8 <memcpy>
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	f7ff fe6b 	bl	800090e <_8g_range>

	if (re == _8bit)
 8000c38:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d135      	bne.n	8000cac <Overturn_detection+0xe0>
	{
		int8_t x , y;
		x = X_Read_8BitRes(hi2c);
 8000c40:	4668      	mov	r0, sp
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2244      	movs	r2, #68	; 0x44
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f006 f9d5 	bl	8006ff8 <memcpy>
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c54:	f7ff feac 	bl	80009b0 <X_Read_8BitRes>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	70fb      	strb	r3, [r7, #3]
		y = Y_Read_8BitRes(hi2c);
 8000c5c:	4668      	mov	r0, sp
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2244      	movs	r2, #68	; 0x44
 8000c64:	4619      	mov	r1, r3
 8000c66:	f006 f9c7 	bl	8006ff8 <memcpy>
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c70:	f7ff fedc 	bl	8000a2c <Y_Read_8BitRes>
 8000c74:	4603      	mov	r3, r0
 8000c76:	70bb      	strb	r3, [r7, #2]

		if( abs(x) <= m && abs(y) <= m ) return 0;
 8000c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bfb8      	it	lt
 8000c80:	425b      	neglt	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dc0c      	bgt.n	8000ca8 <Overturn_detection+0xdc>
 8000c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bfb8      	it	lt
 8000c96:	425b      	neglt	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dc01      	bgt.n	8000ca8 <Overturn_detection+0xdc>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e046      	b.n	8000d36 <Overturn_detection+0x16a>
		else return 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e044      	b.n	8000d36 <Overturn_detection+0x16a>
	}

	else if (re == _12bit)
 8000cac:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d133      	bne.n	8000d1c <Overturn_detection+0x150>
	{
		int16_t x , y;
		x = X_Read_12BitRes(hi2c);
 8000cb4:	4668      	mov	r0, sp
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	2244      	movs	r2, #68	; 0x44
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f006 f99b 	bl	8006ff8 <memcpy>
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc8:	f7ff ff2c 	bl	8000b24 <X_Read_12BitRes>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	80fb      	strh	r3, [r7, #6]
		y = Y_Read_12BitRes(hi2c);
 8000cd0:	4668      	mov	r0, sp
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2244      	movs	r2, #68	; 0x44
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f006 f98d 	bl	8006ff8 <memcpy>
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce4:	f7ff ff48 	bl	8000b78 <Y_Read_12BitRes>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	80bb      	strh	r3, [r7, #4]

		if( abs(x) <= m && abs(y) <= m ) return 0;
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bfb8      	it	lt
 8000cf4:	425b      	neglt	r3, r3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d30b      	bcc.n	8000d18 <Overturn_detection+0x14c>
 8000d00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bfb8      	it	lt
 8000d08:	425b      	neglt	r3, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d301      	bcc.n	8000d18 <Overturn_detection+0x14c>
 8000d14:	2300      	movs	r3, #0
 8000d16:	e00e      	b.n	8000d36 <Overturn_detection+0x16a>
		else return 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e00c      	b.n	8000d36 <Overturn_detection+0x16a>
	}

	Reset_range(hi2c);
 8000d1c:	4668      	mov	r0, sp
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2244      	movs	r2, #68	; 0x44
 8000d24:	4619      	mov	r1, r3
 8000d26:	f006 f967 	bl	8006ff8 <memcpy>
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d30:	f7ff fe24 	bl	800097c <Reset_range>

	// in case no return has been reached
	return 0;
 8000d34:	2300      	movs	r3, #0
 }
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d40:	b004      	add	sp, #16
 8000d42:	4770      	bx	lr

08000d44 <Slip_detection>:

uint8_t Slip_detection(I2C_HandleTypeDef hi2c, resolution re, range ra, int16_t * X_past, int16_t * Y_past, margin m)
{
 8000d44:	b084      	sub	sp, #16
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b094      	sub	sp, #80	; 0x50
 8000d4a:	af12      	add	r7, sp, #72	; 0x48
 8000d4c:	f107 0c10 	add.w	ip, r7, #16
 8000d50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(ra == _2g) _2g_range(hi2c);
 8000d54:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10c      	bne.n	8000d76 <Slip_detection+0x32>
 8000d5c:	4668      	mov	r0, sp
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2244      	movs	r2, #68	; 0x44
 8000d64:	4619      	mov	r1, r3
 8000d66:	f006 f947 	bl	8006ff8 <memcpy>
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d70:	f7ff fd5c 	bl	800082c <_2g_range>
 8000d74:	e01c      	b.n	8000db0 <Slip_detection+0x6c>
	else if (ra == _4g) _4g_range(hi2c);
 8000d76:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10c      	bne.n	8000d98 <Slip_detection+0x54>
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	2244      	movs	r2, #68	; 0x44
 8000d86:	4619      	mov	r1, r3
 8000d88:	f006 f936 	bl	8006ff8 <memcpy>
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d92:	f7ff fd82 	bl	800089a <_4g_range>
 8000d96:	e00b      	b.n	8000db0 <Slip_detection+0x6c>
	else _8g_range(hi2c);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2244      	movs	r2, #68	; 0x44
 8000da0:	4619      	mov	r1, r3
 8000da2:	f006 f929 	bl	8006ff8 <memcpy>
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dac:	f7ff fdaf 	bl	800090e <_8g_range>

	if (re == _8bit)
 8000db0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d151      	bne.n	8000e5c <Slip_detection+0x118>
	{
		int8_t x , y;
		x = X_Read_8BitRes(hi2c);
 8000db8:	4668      	mov	r0, sp
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2244      	movs	r2, #68	; 0x44
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f006 f919 	bl	8006ff8 <memcpy>
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dcc:	f7ff fdf0 	bl	80009b0 <X_Read_8BitRes>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	70fb      	strb	r3, [r7, #3]
		y = Y_Read_8BitRes(hi2c);
 8000dd4:	4668      	mov	r0, sp
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f006 f90b 	bl	8006ff8 <memcpy>
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de8:	f7ff fe20 	bl	8000a2c <Y_Read_8BitRes>
 8000dec:	4603      	mov	r3, r0
 8000dee:	70bb      	strb	r3, [r7, #2]

		if( abs(x - (int8_t)(* X_past)) <= m && abs(y - (int8_t)(* Y_past)) <= m )
 8000df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000df6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dfa:	b252      	sxtb	r2, r2
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e02:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e06:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc1a      	bgt.n	8000e44 <Slip_detection+0x100>
 8000e0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e18:	b252      	sxtb	r2, r2
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e20:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dc0b      	bgt.n	8000e44 <Slip_detection+0x100>
		{
		   // update X_past and Y_past for the next function call

		   * X_past = x;
 8000e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e34:	801a      	strh	r2, [r3, #0]
		   * Y_past = y;
 8000e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e3e:	801a      	strh	r2, [r3, #0]

		   return 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e064      	b.n	8000f0e <Slip_detection+0x1ca>
		}
		else
		{
	       // update X_past and Y_past for the next function call

	       * X_past = x;
 8000e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e4c:	801a      	strh	r2, [r3, #0]
		   * Y_past = y;
 8000e4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e56:	801a      	strh	r2, [r3, #0]

		   return 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e058      	b.n	8000f0e <Slip_detection+0x1ca>
		}
	}

	else if (re == _12bit)
 8000e5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d147      	bne.n	8000ef4 <Slip_detection+0x1b0>
	{
		int16_t x , y;
		x = X_Read_12BitRes(hi2c);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2244      	movs	r2, #68	; 0x44
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f006 f8c3 	bl	8006ff8 <memcpy>
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e78:	f7ff fe54 	bl	8000b24 <X_Read_12BitRes>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80fb      	strh	r3, [r7, #6]
		y = Y_Read_12BitRes(hi2c);
 8000e80:	4668      	mov	r0, sp
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2244      	movs	r2, #68	; 0x44
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f006 f8b5 	bl	8006ff8 <memcpy>
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e94:	f7ff fe70 	bl	8000b78 <Y_Read_12BitRes>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	80bb      	strh	r3, [r7, #4]

		if( abs(x - (* X_past)) <= m && abs(y - (* Y_past)) <= m )
 8000e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ea2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000eac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000eb0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dc15      	bgt.n	8000ee4 <Slip_detection+0x1a0>
 8000eb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ebc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ebe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ec8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ecc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dc07      	bgt.n	8000ee4 <Slip_detection+0x1a0>
		{
			// update X_past and Y_past for the next function call

			* X_past = x;
 8000ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	801a      	strh	r2, [r3, #0]
			* Y_past = y;
 8000eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	801a      	strh	r2, [r3, #0]

			return 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e014      	b.n	8000f0e <Slip_detection+0x1ca>
		}
		else
		{
		   // update X_past and Y_past for the next function call

		   * X_past = x;
 8000ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	801a      	strh	r2, [r3, #0]
		   * Y_past = y;
 8000eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	801a      	strh	r2, [r3, #0]

		   return 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e00c      	b.n	8000f0e <Slip_detection+0x1ca>
		}
	}

	Reset_range(hi2c);
 8000ef4:	4668      	mov	r0, sp
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2244      	movs	r2, #68	; 0x44
 8000efc:	4619      	mov	r1, r3
 8000efe:	f006 f87b 	bl	8006ff8 <memcpy>
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f08:	f7ff fd38 	bl	800097c <Reset_range>

	// in case no return has been reached

	return 0;
 8000f0c:	2300      	movs	r3, #0
 }
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr

08000f1c <Filter_Configuration>:
// CAN setup functions

// Filter configuration

void Filter_Configuration(CAN_HandleTypeDef * hcan, MASK mask, ID id, FLTR_NR fltr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	817b      	strh	r3, [r7, #10]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	813b      	strh	r3, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]

CAN_FilterTypeDef FilterConfigInit;

// field that stores the id value

FilterConfigInit.FilterIdHigh = (uint32_t) (id << 5);
 8000f36:	893b      	ldrh	r3, [r7, #8]
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	613b      	str	r3, [r7, #16]

FilterConfigInit.FilterIdLow  = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

// field that stores the mask value

FilterConfigInit.FilterMaskIdHigh = (uint32_t) (mask << 5);
 8000f40:	897b      	ldrh	r3, [r7, #10]
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	61bb      	str	r3, [r7, #24]

FilterConfigInit.FilterMaskIdLow = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
FilterConfigInit.FilterFIFOAssignment =  CAN_FILTER_FIFO0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]

//field that stores the filter number ( 0x00 to 0x0E )

FilterConfigInit.FilterBank = fltr;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

FilterConfigInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
FilterConfigInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
FilterConfigInit.FilterActivation = CAN_FILTER_ENABLE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
FilterConfigInit.SlaveStartFilterBank = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34

// enabling the filter

if( HAL_CAN_ConfigFilter(hcan, &FilterConfigInit) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f001 f94e 	bl	800220a <HAL_CAN_ConfigFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <Filter_Configuration+0x5c>
{
	Error_Handler();
 8000f74:	f000 fd14 	bl	80019a0 <Error_Handler>
}
}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	; 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <CAN_Interrupt_Enabler>:

// Interrupt enable function

void CAN_Interrupt_Enabler(CAN_HandleTypeDef * hcan, uint32_t flags)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  if( HAL_CAN_ActivateNotification(hcan, flags) != HAL_OK)
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fc64 	bl	800285a <HAL_CAN_ActivateNotification>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <CAN_Interrupt_Enabler+0x1c>
  {
	 Error_Handler();
 8000f98:	f000 fd02 	bl	80019a0 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <CAN_Wait_For_Startup>:

// Startup message function

void CAN_Wait_For_Startup(CAN_HandleTypeDef * hcan, UART_HandleTypeDef * huart, TIM_HandleTypeDef * htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a6      	sub	sp, #152	; 0x98
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	char msg[100];
    memset(msg,0,sizeof(msg));
 8000fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb4:	2264      	movs	r2, #100	; 0x64
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f005 ffe9 	bl	8006f90 <memset>
	sprintf(msg,"Waiting for master startup sequence... \r\n\n");
 8000fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc2:	493b      	ldr	r1, [pc, #236]	; (80010b0 <CAN_Wait_For_Startup+0x10c>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 ffc3 	bl	8006f50 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen(msg), HAL_MAX_DELAY);
 8000fca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f906 	bl	80001e0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	f005 fa8f 	bl	8006504 <HAL_UART_Transmit>
	// a message is sent every 20 seconds through UART to signify that the board is approaching a local restart sequence
    // unless the master sends the startup message

    // after 60 seconds pass, the local reset function is called and the board resets

    if(HAL_TIM_Base_Start_IT(htim) != HAL_OK)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f004 ff8e 	bl	8005f08 <HAL_TIM_Base_Start_IT>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <CAN_Wait_For_Startup+0x52>
	{
	  	  Error_Handler();
 8000ff2:	f000 fcd5 	bl	80019a0 <Error_Handler>
	}

	while(HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0 ) == 0)
 8000ff6:	bf00      	nop
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f001 fc05 	bl	800280a <HAL_CAN_GetRxFifoFillLevel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f8      	beq.n	8000ff8 <CAN_Wait_For_Startup+0x54>
	{
	}
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t dummy[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, dummy);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	2100      	movs	r1, #0
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f001 fad8 	bl	80025c6 <HAL_CAN_GetRxMessage>
	if( RxHeader.StdId != 0x400 )
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101c:	d01e      	beq.n	800105c <CAN_Wait_For_Startup+0xb8>
	{
	   memset(msg,0,sizeof(msg));
 800101e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 ffb2 	bl	8006f90 <memset>
	   sprintf(msg,"Startup transmitted on the wrong ID...\r\nRestarting sequence enabled...\r\n\n");
 800102c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001030:	4920      	ldr	r1, [pc, #128]	; (80010b4 <CAN_Wait_For_Startup+0x110>)
 8001032:	4618      	mov	r0, r3
 8001034:	f005 ff8c 	bl	8006f50 <siprintf>
	   HAL_UART_Transmit(huart, msg, strlen(msg), HAL_MAX_DELAY);
 8001038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8cf 	bl	80001e0 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f005 fa58 	bl	8006504 <HAL_UART_Transmit>
	   System_reset_sequence(huart);
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f000 f857 	bl	8001108 <System_reset_sequence>
	      	  Error_Handler();
	      }

	    HAL_TIM_Base_MspDeInit(htim);
	}
}
 800105a:	e025      	b.n	80010a8 <CAN_Wait_For_Startup+0x104>
		memset(msg,0,sizeof(msg));
 800105c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f005 ff93 	bl	8006f90 <memset>
		sprintf(msg,"Startup successful...\r\nLet the fun begin!\r\n\n");
 800106a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800106e:	4912      	ldr	r1, [pc, #72]	; (80010b8 <CAN_Wait_For_Startup+0x114>)
 8001070:	4618      	mov	r0, r3
 8001072:	f005 ff6d 	bl	8006f50 <siprintf>
	    HAL_UART_Transmit(huart, msg, strlen(msg), HAL_MAX_DELAY);
 8001076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f005 fa39 	bl	8006504 <HAL_UART_Transmit>
	    if(HAL_TIM_Base_Stop_IT(htim) != HAL_OK)
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f004 ff94 	bl	8005fc0 <HAL_TIM_Base_Stop_IT>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <CAN_Wait_For_Startup+0xfe>
	      	  Error_Handler();
 800109e:	f000 fc7f 	bl	80019a0 <Error_Handler>
	    HAL_TIM_Base_MspDeInit(htim);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fdd0 	bl	8001c48 <HAL_TIM_Base_MspDeInit>
}
 80010a8:	bf00      	nop
 80010aa:	3798      	adds	r7, #152	; 0x98
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	080078b0 	.word	0x080078b0
 80010b4:	080078dc 	.word	0x080078dc
 80010b8:	08007928 	.word	0x08007928

080010bc <System_start_sequence>:
// System status functions

// Start function

void System_start_sequence(UART_HandleTypeDef * huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b092      	sub	sp, #72	; 0x48
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	char msg[60];
	memset(msg,0,sizeof(msg));
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	223c      	movs	r2, #60	; 0x3c
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 ff5f 	bl	8006f90 <memset>
    sprintf(msg,"System starting...\r\n1...\r\n2...\r\n3...\r\nSystem online!\r\n\n");
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	490b      	ldr	r1, [pc, #44]	; (8001104 <System_start_sequence+0x48>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 ff39 	bl	8006f50 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen(msg), HAL_MAX_DELAY);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f87c 	bl	80001e0 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f107 010c 	add.w	r1, r7, #12
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f005 fa05 	bl	8006504 <HAL_UART_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3748      	adds	r7, #72	; 0x48
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08007958 	.word	0x08007958

08001108 <System_reset_sequence>:

// Master reset function

void System_reset_sequence(UART_HandleTypeDef * huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b092      	sub	sp, #72	; 0x48
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	char msg[60];
	memset(msg,0,sizeof(msg));
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	223c      	movs	r2, #60	; 0x3c
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f005 ff39 	bl	8006f90 <memset>
    sprintf(msg,"System reseting...\r\n1...\r\n2...\r\n3...\r\nReset time!\r\n\n");
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <System_reset_sequence+0x54>)
 8001124:	4618      	mov	r0, r3
 8001126:	f005 ff13 	bl	8006f50 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen(msg), HAL_MAX_DELAY);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f856 	bl	80001e0 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	f107 010c 	add.w	r1, r7, #12
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f005 f9df 	bl	8006504 <HAL_UART_Transmit>

	// setting of this pin creates a bridge between GND and the reset pin, thus reseting the board

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <System_reset_sequence+0x58>)
 800114e:	f002 f8d1 	bl	80032f4 <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	3748      	adds	r7, #72	; 0x48
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08007990 	.word	0x08007990
 8001160:	48000400 	.word	0x48000400

08001164 <main>:


/* Entry point for the main() function ---------------------------------------------------------*/

int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  // HAL initialization

  HAL_Init();
 8001168:	f000 fed8 	bl	8001f1c <HAL_Init>

  // Configuring the system clock

  SystemClock_Config();
 800116c:	f000 f83a 	bl	80011e4 <SystemClock_Config>

  // Peripherals initialization

  MX_GPIO_Init();
 8001170:	f000 f9b6 	bl	80014e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001174:	f000 f984 	bl	8001480 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001178:	f000 f886 	bl	8001288 <MX_CAN1_Init>
  MX_I2C2_Init();
 800117c:	f000 f8ba 	bl	80012f4 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001180:	f000 f8f8 	bl	8001374 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001184:	f000 f936 	bl	80013f4 <MX_TIM16_Init>

  // CAN filter configuration

  Filter_Configuration(&hcan1, 0x5E6, 0x400, 0x000);
 8001188:	2300      	movs	r3, #0
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	f240 51e6 	movw	r1, #1510	; 0x5e6
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <main+0x70>)
 8001194:	f7ff fec2 	bl	8000f1c <Filter_Configuration>

  // calling System_start_sequence() to make sure everything is fine till this step

  System_start_sequence(&huart2);
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <main+0x74>)
 800119a:	f7ff ff8f 	bl	80010bc <System_start_sequence>

  // starting the CAN peripheral

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <main+0x70>)
 80011a0:	f001 f8fd 	bl	800239e <HAL_CAN_Start>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <main+0x4a>
  {
   Error_Handler();
 80011aa:	f000 fbf9 	bl	80019a0 <Error_Handler>
  }

  // waiting in blocking mode for startup sequence

  CAN_Wait_For_Startup(&hcan1,&huart2,&htim16);
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <main+0x78>)
 80011b0:	4909      	ldr	r1, [pc, #36]	; (80011d8 <main+0x74>)
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <main+0x70>)
 80011b4:	f7ff fef6 	bl	8000fa4 <CAN_Wait_For_Startup>

  // enabling CAN interrupts ( for transmission, reception and possible errors )

  CAN_Interrupt_Enabler(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF);
 80011b8:	f240 4103 	movw	r1, #1027	; 0x403
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <main+0x70>)
 80011be:	f7ff fedf 	bl	8000f80 <CAN_Interrupt_Enabler>

  // starting the timer that handles the transmission of data through CAN

  if(HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <main+0x7c>)
 80011c4:	f004 fea0 	bl	8005f08 <HAL_TIM_Base_Start_IT>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <main+0x6e>
  {
   Error_Handler();
 80011ce:	f000 fbe7 	bl	80019a0 <Error_Handler>
  }

  // the infinite loop within main() function

  while (1)
 80011d2:	e7fe      	b.n	80011d2 <main+0x6e>
 80011d4:	2000007c 	.word	0x2000007c
 80011d8:	20000190 	.word	0x20000190
 80011dc:	20000144 	.word	0x20000144
 80011e0:	200000f8 	.word	0x200000f8

080011e4 <SystemClock_Config>:
/* Function implementations ---------------------------------------------------------*/

// system clock configuration function

void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b096      	sub	sp, #88	; 0x58
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2244      	movs	r2, #68	; 0x44
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fecc 	bl	8006f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001206:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120a:	f003 fc39 	bl	8004a80 <HAL_PWREx_ControlVoltageScaling>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001214:	f000 fbc4 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001232:	230a      	movs	r3, #10
 8001234:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001236:	2307      	movs	r3, #7
 8001238:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fc70 	bl	8004b2c <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001252:	f000 fba5 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2303      	movs	r3, #3
 800125c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f870 	bl	8005354 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800127a:	f000 fb91 	bl	80019a0 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3758      	adds	r7, #88	; 0x58
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <MX_CAN1_Init>:

// CAN1 peripheral initialization function

static void MX_CAN1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_CAN1_Init+0x64>)
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <MX_CAN1_Init+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_CAN1_Init+0x64>)
 8001294:	220a      	movs	r2, #10
 8001296:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_CAN1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_CAN1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_CAN1_Init+0x64>)
 80012a6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80012aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_CAN1_Init+0x64>)
 80012ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_CAN1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_CAN1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_CAN1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_CAN1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_CAN1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_CAN1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_CAN1_Init+0x64>)
 80012da:	f000 fe9b 	bl	8002014 <HAL_CAN_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012e4:	f000 fb5c 	bl	80019a0 <Error_Handler>
  }


}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000007c 	.word	0x2000007c
 80012f0:	40006400 	.word	0x40006400

080012f4 <MX_I2C2_Init>:

// I2C peripheral initialization function

static void MX_I2C2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_I2C2_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_I2C2_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xD010BDBD;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_I2C2_Init+0x74>)
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <MX_I2C2_Init+0x7c>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_I2C2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_I2C2_Init+0x74>)
 800130c:	2201      	movs	r2, #1
 800130e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_I2C2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_I2C2_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_I2C2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_I2C2_Init+0x74>)
 8001330:	f001 fff8 	bl	8003324 <HAL_I2C_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800133a:	f000 fb31 	bl	80019a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_I2C2_Init+0x74>)
 8001342:	f003 faf7 	bl	8004934 <HAL_I2CEx_ConfigAnalogFilter>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800134c:	f000 fb28 	bl	80019a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_I2C2_Init+0x74>)
 8001354:	f003 fb39 	bl	80049ca <HAL_I2CEx_ConfigDigitalFilter>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 fb1f 	bl	80019a0 <Error_Handler>
  }

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a4 	.word	0x200000a4
 800136c:	40005800 	.word	0x40005800
 8001370:	d010bdbd 	.word	0xd010bdbd

08001374 <MX_TIM6_Init>:

// TIM6 peripheral initialization function

static void MX_TIM6_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  htim6.Instance = TIM6;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM6_Init+0x74>)
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <MX_TIM6_Init+0x78>)
 8001388:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;
 800138a:	f004 f991 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 800138e:	4603      	mov	r3, r0
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_TIM6_Init+0x7c>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3b01      	subs	r3, #1
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_TIM6_Init+0x74>)
 800139c:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_TIM6_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_TIM6_Init+0x74>)
 80013a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_TIM6_Init+0x74>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM6_Init+0x74>)
 80013b4:	f004 fd50 	bl	8005e58 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80013be:	f000 faef 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM6_Init+0x74>)
 80013d0:	f004 ffbe 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 80013da:	f000 fae1 	bl	80019a0 <Error_Handler>
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000f8 	.word	0x200000f8
 80013ec:	40001000 	.word	0x40001000
 80013f0:	431bde83 	.word	0x431bde83

080013f4 <MX_TIM16_Init>:

// Timer 16 initialization function

static void MX_TIM16_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig2 = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
  htim16.Instance = TIM16;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_TIM16_Init+0x80>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <MX_TIM16_Init+0x84>)
 8001408:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = HAL_RCC_GetPCLK2Freq()/500 - 1;
 800140a:	f004 f951 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 800140e:	4603      	mov	r3, r0
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <MX_TIM16_Init+0x88>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	3b01      	subs	r3, #1
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <MX_TIM16_Init+0x80>)
 800141c:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_TIM16_Init+0x80>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 56000;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_TIM16_Init+0x80>)
 8001426:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 800142a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_TIM16_Init+0x80>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_TIM16_Init+0x80>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_TIM16_Init+0x80>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM16_Init+0x80>)
 8001440:	f004 fd0a 	bl	8005e58 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM16_Init+0x5a>
  {
    Error_Handler();
 800144a:	f000 faa9 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim16, &sMasterConfig2) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_TIM16_Init+0x80>)
 800145c:	f004 ff78 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM16_Init+0x76>
  {
    Error_Handler();
 8001466:	f000 fa9b 	bl	80019a0 <Error_Handler>
  }

}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000144 	.word	0x20000144
 8001478:	40014400 	.word	0x40014400
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <MX_USART2_UART_Init>:

// UART2 initialization function

static void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART2_UART_Init+0x58>)
 80014c4:	f004 ffd0 	bl	8006468 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 fa67 	bl	80019a0 <Error_Handler>
  }

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000190 	.word	0x20000190
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:

// GPIO initialization function

static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <MX_GPIO_Init+0x128>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a43      	ldr	r2, [pc, #268]	; (8001608 <MX_GPIO_Init+0x128>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <MX_GPIO_Init+0x128>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <MX_GPIO_Init+0x128>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <MX_GPIO_Init+0x128>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <MX_GPIO_Init+0x128>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <MX_GPIO_Init+0x128>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <MX_GPIO_Init+0x128>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_GPIO_Init+0x128>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_GPIO_Init+0x128>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <MX_GPIO_Init+0x128>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_GPIO_Init+0x128>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	21b0      	movs	r1, #176	; 0xb0
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f001 fec9 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001568:	4828      	ldr	r0, [pc, #160]	; (800160c <MX_GPIO_Init+0x12c>)
 800156a:	f001 fec3 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001574:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4822      	ldr	r0, [pc, #136]	; (8001610 <MX_GPIO_Init+0x130>)
 8001586:	f001 fd3b 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800158a:	23b0      	movs	r3, #176	; 0xb0
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f001 fd2c 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f001 fd1f 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80015c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_GPIO_Init+0x12c>)
 80015dc:	f001 fd10 	bl	8003000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_GPIO_Init+0x12c>)
 80015fa:	f001 fd01 	bl	8003000 <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400
 8001610:	48000800 	.word	0x48000800

08001614 <HAL_CAN_TxMailbox0CompleteCallback>:

// CAN transmission completion callback

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	memset(msg,0,sizeof(msg)); // clear the msg array contents
 800161c:	2264      	movs	r2, #100	; 0x64
 800161e:	2100      	movs	r1, #0
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8001622:	f005 fcb5 	bl	8006f90 <memset>
	sprintf(msg,"Message sent succesfully!\r\n");
 8001626:	490a      	ldr	r1, [pc, #40]	; (8001650 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 800162a:	f005 fc91 	bl	8006f50 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8001630:	f7fe fdd6 	bl	80001e0 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	4903      	ldr	r1, [pc, #12]	; (800164c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 8001640:	f004 ff60 	bl	8006504 <HAL_UART_Transmit>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000218 	.word	0x20000218
 8001650:	080079c8 	.word	0x080079c8
 8001654:	20000190 	.word	0x20000190

08001658 <HAL_CAN_ErrorCallback>:

// CAN error callback

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	memset(msg,0,sizeof(msg)); // clear the msg array contents
 8001660:	2264      	movs	r2, #100	; 0x64
 8001662:	2100      	movs	r1, #0
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <HAL_CAN_ErrorCallback+0x38>)
 8001666:	f005 fc93 	bl	8006f90 <memset>
	sprintf(msg,":( Something went wrong...\r\n");
 800166a:	490a      	ldr	r1, [pc, #40]	; (8001694 <HAL_CAN_ErrorCallback+0x3c>)
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <HAL_CAN_ErrorCallback+0x38>)
 800166e:	f005 fc6f 	bl	8006f50 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <HAL_CAN_ErrorCallback+0x38>)
 8001674:	f7fe fdb4 	bl	80001e0 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	4903      	ldr	r1, [pc, #12]	; (8001690 <HAL_CAN_ErrorCallback+0x38>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <HAL_CAN_ErrorCallback+0x40>)
 8001684:	f004 ff3e 	bl	8006504 <HAL_UART_Transmit>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000218 	.word	0x20000218
 8001694:	080079e4 	.word	0x080079e4
 8001698:	20000190 	.word	0x20000190

0800169c <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN receive message on FIFO0 callback

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef RxHeader;

      uint8_t margin[8];

	  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, margin) != HAL_OK)
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	f107 0214 	add.w	r2, r7, #20
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 ff89 	bl	80025c6 <HAL_CAN_GetRxMessage>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	  {
		  Error_Handler();
 80016ba:	f000 f971 	bl	80019a0 <Error_Handler>
	  }
      if(RxHeader.StdId == 0x619)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f240 6219 	movw	r2, #1561	; 0x619
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d135      	bne.n	8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
      {

	  margin_o = margin[0];
 80016c8:	7b3b      	ldrb	r3, [r7, #12]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80016ce:	801a      	strh	r2, [r3, #0]
	  margin_s = margin[1];
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80016d6:	801a      	strh	r2, [r3, #0]
	  memset(msg,0,sizeof(msg));
 80016d8:	2264      	movs	r2, #100	; 0x64
 80016da:	2100      	movs	r1, #0
 80016dc:	4819      	ldr	r0, [pc, #100]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80016de:	f005 fc57 	bl	8006f90 <memset>
	  sprintf(msg,"Margin_overturn: %d\r\n",margin_o);
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80016ea:	4816      	ldr	r0, [pc, #88]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80016ec:	f005 fc30 	bl	8006f50 <siprintf>
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80016f2:	f7fe fd75 	bl	80001e0 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	4911      	ldr	r1, [pc, #68]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001702:	f004 feff 	bl	8006504 <HAL_UART_Transmit>
	  memset(msg,0,sizeof(msg));
 8001706:	2264      	movs	r2, #100	; 0x64
 8001708:	2100      	movs	r1, #0
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800170c:	f005 fc40 	bl	8006f90 <memset>
	  sprintf(msg,"Margin_slip: %d\r\n",margin_s);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001718:	480a      	ldr	r0, [pc, #40]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800171a:	f005 fc19 	bl	8006f50 <siprintf>
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001720:	f7fe fd5e 	bl	80001e0 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	4905      	ldr	r1, [pc, #20]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001730:	f004 fee8 	bl	8006504 <HAL_UART_Transmit>
      }
}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000027c 	.word	0x2000027c
 8001740:	2000027e 	.word	0x2000027e
 8001744:	20000218 	.word	0x20000218
 8001748:	08007a04 	.word	0x08007a04
 800174c:	20000190 	.word	0x20000190
 8001750:	08007a1c 	.word	0x08007a1c

08001754 <HAL_TIM_PeriodElapsedCallback>:

// timer period elapsed callback

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b0a3      	sub	sp, #140	; 0x8c
 8001758:	af16      	add	r7, sp, #88	; 0x58
 800175a:	6078      	str	r0, [r7, #4]
  if( htim->Instance == TIM6 )
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a80      	ldr	r2, [pc, #512]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001762:	4293      	cmp	r3, r2
 8001764:	f040 80c0 	bne.w	80018e8 <HAL_TIM_PeriodElapsedCallback+0x194>
  {
    uint32_t TxMailbox;
    ACTIVE(hi2c2);
 8001768:	4c7f      	ldr	r4, [pc, #508]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800176a:	4668      	mov	r0, sp
 800176c:	f104 0310 	add.w	r3, r4, #16
 8001770:	2244      	movs	r2, #68	; 0x44
 8001772:	4619      	mov	r1, r3
 8001774:	f005 fc40 	bl	8006ff8 <memcpy>
 8001778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177c:	f7fe ffe2 	bl	8000744 <ACTIVE>
    if(nr_slip_period < 10)
 8001780:	4b7a      	ldr	r3, [pc, #488]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d821      	bhi.n	80017cc <HAL_TIM_PeriodElapsedCallback+0x78>
    {
     slip = Slip_detection(hi2c2, _8bit, _4g, &X_past, &Y_past, margin_s);
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4c76      	ldr	r4, [pc, #472]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800178e:	9315      	str	r3, [sp, #84]	; 0x54
 8001790:	4b78      	ldr	r3, [pc, #480]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001792:	9314      	str	r3, [sp, #80]	; 0x50
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001796:	9313      	str	r3, [sp, #76]	; 0x4c
 8001798:	2301      	movs	r3, #1
 800179a:	9312      	str	r3, [sp, #72]	; 0x48
 800179c:	2300      	movs	r3, #0
 800179e:	9311      	str	r3, [sp, #68]	; 0x44
 80017a0:	4668      	mov	r0, sp
 80017a2:	f104 0310 	add.w	r3, r4, #16
 80017a6:	2244      	movs	r2, #68	; 0x44
 80017a8:	4619      	mov	r1, r3
 80017aa:	f005 fc25 	bl	8006ff8 <memcpy>
 80017ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017b2:	f7ff fac7 	bl	8000d44 <Slip_detection>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017bc:	701a      	strb	r2, [r3, #0]
     nr_slip_period++;
 80017be:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e008      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x8a>
    }
    else
    	{
    	nr_slip_period++;
 80017cc:	4b67      	ldr	r3, [pc, #412]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017d6:	701a      	strb	r2, [r3, #0]
    	slip = 0;
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
    	}
    uint8_t tilt_slip = (Overturn_detection(hi2c2, _8bit, _4g, margin_o) << 4) | slip;
 80017de:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	4c61      	ldr	r4, [pc, #388]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80017e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80017e6:	2301      	movs	r3, #1
 80017e8:	9312      	str	r3, [sp, #72]	; 0x48
 80017ea:	2300      	movs	r3, #0
 80017ec:	9311      	str	r3, [sp, #68]	; 0x44
 80017ee:	4668      	mov	r0, sp
 80017f0:	f104 0310 	add.w	r3, r4, #16
 80017f4:	2244      	movs	r2, #68	; 0x44
 80017f6:	4619      	mov	r1, r3
 80017f8:	f005 fbfe 	bl	8006ff8 <memcpy>
 80017fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001800:	f7ff f9e4 	bl	8000bcc <Overturn_detection>
 8001804:	4603      	mov	r3, r0
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	b25a      	sxtb	r2, r3
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x228>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t info[4] = { X_Read_8BitRes(hi2c2), Y_Read_8BitRes(hi2c2), Z_Read_8BitRes(hi2c2), tilt_slip};
 8001818:	4c53      	ldr	r4, [pc, #332]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800181a:	4668      	mov	r0, sp
 800181c:	f104 0310 	add.w	r3, r4, #16
 8001820:	2244      	movs	r2, #68	; 0x44
 8001822:	4619      	mov	r1, r3
 8001824:	f005 fbe8 	bl	8006ff8 <memcpy>
 8001828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800182c:	f7ff f8c0 	bl	80009b0 <X_Read_8BitRes>
 8001830:	4603      	mov	r3, r0
 8001832:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001836:	4c4c      	ldr	r4, [pc, #304]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001838:	4668      	mov	r0, sp
 800183a:	f104 0310 	add.w	r3, r4, #16
 800183e:	2244      	movs	r2, #68	; 0x44
 8001840:	4619      	mov	r1, r3
 8001842:	f005 fbd9 	bl	8006ff8 <memcpy>
 8001846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800184a:	f7ff f8ef 	bl	8000a2c <Y_Read_8BitRes>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001854:	4c44      	ldr	r4, [pc, #272]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001856:	4668      	mov	r0, sp
 8001858:	f104 0310 	add.w	r3, r4, #16
 800185c:	2244      	movs	r2, #68	; 0x44
 800185e:	4619      	mov	r1, r3
 8001860:	f005 fbca 	bl	8006ff8 <memcpy>
 8001864:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001868:	f7ff f91e 	bl	8000aa8 <Z_Read_8BitRes>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001872:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	STANDBY(hi2c2);
 800187a:	4c3b      	ldr	r4, [pc, #236]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800187c:	4668      	mov	r0, sp
 800187e:	f104 0310 	add.w	r3, r4, #16
 8001882:	2244      	movs	r2, #68	; 0x44
 8001884:	4619      	mov	r1, r3
 8001886:	f005 fbb7 	bl	8006ff8 <memcpy>
 800188a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800188e:	f7fe ff93 	bl	80007b8 <STANDBY>
    CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 4;
 8001892:	2304      	movs	r3, #4
 8001894:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x666;
 8001896:	f240 6366 	movw	r3, #1638	; 0x666
 800189a:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,info,&TxMailbox) != HAL_OK)
 80018a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018ac:	f107 010c 	add.w	r1, r7, #12
 80018b0:	4834      	ldr	r0, [pc, #208]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018b2:	f000 fdb8 	bl	8002426 <HAL_CAN_AddTxMessage>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d011      	beq.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x18c>
	{
		if( nr_reset_period == 100)
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d106      	bne.n	80018d2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		{
			nr_reset_period = 0;
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
			System_reset_sequence(&huart2);
 80018ca:	4830      	ldr	r0, [pc, #192]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80018cc:	f7ff fc1c 	bl	8001108 <System_reset_sequence>
		 sprintf(msg,"Startup not received. Initializing local restart sequence! \r\n\n");
		 HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
		 System_reset_sequence(&huart2);
	  }
  }
}
 80018d0:	e043      	b.n	800195a <HAL_TIM_PeriodElapsedCallback+0x206>
			nr_reset_period++;
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018dc:	801a      	strh	r2, [r3, #0]
}
 80018de:	e03c      	b.n	800195a <HAL_TIM_PeriodElapsedCallback+0x206>
		nr_reset_period = 0;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	801a      	strh	r2, [r3, #0]
}
 80018e6:	e038      	b.n	800195a <HAL_TIM_PeriodElapsedCallback+0x206>
	  if( nr_startup_wait != 4)
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d01d      	beq.n	800192c <HAL_TIM_PeriodElapsedCallback+0x1d8>
	  memset(msg,0,sizeof(msg));
 80018f0:	2264      	movs	r2, #100	; 0x64
 80018f2:	2100      	movs	r1, #0
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80018f6:	f005 fb4b 	bl	8006f90 <memset>
	  sprintf(msg,"Startup attempt %d / 3\r\n", nr_startup_wait);
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4925      	ldr	r1, [pc, #148]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001902:	4824      	ldr	r0, [pc, #144]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001904:	f005 fb24 	bl	8006f50 <siprintf>
	  nr_startup_wait ++ ;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001912:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001916:	f7fe fc63 	bl	80001e0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	491c      	ldr	r1, [pc, #112]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001924:	4819      	ldr	r0, [pc, #100]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001926:	f004 fded 	bl	8006504 <HAL_UART_Transmit>
}
 800192a:	e016      	b.n	800195a <HAL_TIM_PeriodElapsedCallback+0x206>
		 memset(msg,0,sizeof(msg));
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	2100      	movs	r1, #0
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001932:	f005 fb2d 	bl	8006f90 <memset>
		 sprintf(msg,"Startup not received. Initializing local restart sequence! \r\n\n");
 8001936:	4919      	ldr	r1, [pc, #100]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800193a:	f005 fb09 	bl	8006f50 <siprintf>
		 HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 800193e:	4815      	ldr	r0, [pc, #84]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001940:	f7fe fc4e 	bl	80001e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	4911      	ldr	r1, [pc, #68]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001950:	f004 fdd8 	bl	8006504 <HAL_UART_Transmit>
		 System_reset_sequence(&huart2);
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001956:	f7ff fbd7 	bl	8001108 <System_reset_sequence>
}
 800195a:	bf00      	nop
 800195c:	3734      	adds	r7, #52	; 0x34
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	40001000 	.word	0x40001000
 8001968:	200000a4 	.word	0x200000a4
 800196c:	20000282 	.word	0x20000282
 8001970:	2000027e 	.word	0x2000027e
 8001974:	20000281 	.word	0x20000281
 8001978:	20000280 	.word	0x20000280
 800197c:	20000286 	.word	0x20000286
 8001980:	2000027c 	.word	0x2000027c
 8001984:	2000007c 	.word	0x2000007c
 8001988:	20000284 	.word	0x20000284
 800198c:	20000190 	.word	0x20000190
 8001990:	20000000 	.word	0x20000000
 8001994:	20000218 	.word	0x20000218
 8001998:	08007a30 	.word	0x08007a30
 800199c:	08007a4c 	.word	0x08007a4c

080019a0 <Error_Handler>:

// error handler function

void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_CAN_MspInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d15e      	bne.n	8001ad4 <HAL_CAN_MspInit+0xe0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_CAN_MspInit+0xec>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8001a70:	230a      	movs	r3, #10
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481a      	ldr	r0, [pc, #104]	; (8001ae4 <HAL_CAN_MspInit+0xf0>)
 8001a7c:	f001 fac0 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a92:	2309      	movs	r3, #9
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f001 faae 	bl	8003000 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2013      	movs	r0, #19
 8001aaa:	f001 fa16 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001aae:	2013      	movs	r0, #19
 8001ab0:	f001 fa2f 	bl	8002f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2014      	movs	r0, #20
 8001aba:	f001 fa0e 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001abe:	2014      	movs	r0, #20
 8001ac0:	f001 fa27 	bl	8002f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2015      	movs	r0, #21
 8001aca:	f001 fa06 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ace:	2015      	movs	r0, #21
 8001ad0:	f001 fa1f 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40006400 	.word	0x40006400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a4      	sub	sp, #144	; 0x90
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2268      	movs	r2, #104	; 0x68
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 fa41 	bl	8006f90 <memset>
  if(hi2c->Instance==I2C2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_I2C_MspInit+0xd0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d14a      	bne.n	8001bae <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fe39 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b30:	f7ff ff36 	bl	80019a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b50:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b52:	2312      	movs	r3, #18
 8001b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b64:	2304      	movs	r3, #4
 8001b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <HAL_I2C_MspInit+0xd8>)
 8001b72:	f001 fa45 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b80:	6593      	str	r3, [r2, #88]	; 0x58
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_I2C_MspInit+0xd4>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2021      	movs	r0, #33	; 0x21
 8001b94:	f001 f9a1 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b98:	2021      	movs	r0, #33	; 0x21
 8001b9a:	f001 f9ba 	bl	8002f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2022      	movs	r0, #34	; 0x22
 8001ba4:	f001 f999 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ba8:	2022      	movs	r0, #34	; 0x22
 8001baa:	f001 f9b2 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3790      	adds	r7, #144	; 0x90
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005800 	.word	0x40005800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	48000400 	.word	0x48000400

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_TIM_Base_MspInit+0x78>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d114      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f001 f971 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf8:	2036      	movs	r0, #54	; 0x36
 8001bfa:	f001 f98a 	bl	8002f12 <HAL_NVIC_EnableIRQ>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  }

}
 8001bfe:	e018      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_TIM_Base_MspInit+0x80>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6613      	str	r3, [r2, #96]	; 0x60
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_Base_MspInit+0x7c>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2019      	movs	r0, #25
 8001c28:	f001 f957 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c2c:	2019      	movs	r0, #25
 8001c2e:	f001 f970 	bl	8002f12 <HAL_NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40001000 	.word	0x40001000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40014400 	.word	0x40014400

08001c48 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_TIM_Base_MspDeInit+0x4c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d109      	bne.n	8001c6e <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_TIM_Base_MspDeInit+0x50>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_TIM_Base_MspDeInit+0x50>)
 8001c60:	f023 0310 	bic.w	r3, r3, #16
 8001c64:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001c66:	2036      	movs	r0, #54	; 0x36
 8001c68:	f001 f961 	bl	8002f2e <HAL_NVIC_DisableIRQ>

    /* TIM16 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
  }

}
 8001c6c:	e00d      	b.n	8001c8a <HAL_TIM_Base_MspDeInit+0x42>
  else if(htim_base->Instance==TIM16)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspDeInit+0x54>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d108      	bne.n	8001c8a <HAL_TIM_Base_MspDeInit+0x42>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_TIM_Base_MspDeInit+0x50>)
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_TIM_Base_MspDeInit+0x50>)
 8001c7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c82:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8001c84:	2019      	movs	r0, #25
 8001c86:	f001 f952 	bl	8002f2e <HAL_NVIC_DisableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40001000 	.word	0x40001000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40014400 	.word	0x40014400

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0a4      	sub	sp, #144	; 0x90
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2268      	movs	r2, #104	; 0x68
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f005 f965 	bl	8006f90 <memset>
  if(huart->Instance==USART2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <HAL_UART_MspInit+0xb0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d13a      	bne.n	8001d46 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fd5d 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ce8:	f7ff fe5a 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_UART_MspInit+0xb4>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d32:	2307      	movs	r3, #7
 8001d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f001 f95d 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3790      	adds	r7, #144	; 0x90
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40021000 	.word	0x40021000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 f916 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <CAN1_TX_IRQHandler+0x10>)
 8001db2:	f000 fd78 	bl	80028a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000007c 	.word	0x2000007c

08001dc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <CAN1_RX0_IRQHandler+0x10>)
 8001dc6:	f000 fd6e 	bl	80028a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000007c 	.word	0x2000007c

08001dd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <CAN1_RX1_IRQHandler+0x10>)
 8001dda:	f000 fd64 	bl	80028a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000007c 	.word	0x2000007c

08001de8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <I2C2_EV_IRQHandler+0x10>)
 8001dee:	f001 fd63 	bl	80038b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200000a4 	.word	0x200000a4

08001dfc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <I2C2_ER_IRQHandler+0x10>)
 8001e02:	f001 fd73 	bl	80038ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000a4 	.word	0x200000a4

08001e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM6_DAC_IRQHandler+0x10>)
 8001e16:	f004 f902 	bl	800601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200000f8 	.word	0x200000f8

08001e24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e2a:	f004 f8f8 	bl	800601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000144 	.word	0x20000144

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f005 f89a 	bl	8006fa0 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20028000 	.word	0x20028000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000288 	.word	0x20000288
 8001ea0:	200003d8 	.word	0x200003d8

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff ffea 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	; (8001f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <LoopForever+0xe>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	; (8001f14 <LoopForever+0x16>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f005 f859 	bl	8006fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7ff f933 	bl	8001164 <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f00:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f0c:	08007b18 	.word	0x08007b18
  ldr r2, =_sbss
 8001f10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f14:	200003d8 	.word	0x200003d8

08001f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_Init+0x3c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_Init+0x3c>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 ffc6 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f80f 	bl	8001f5c <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	e001      	b.n	8001f4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f4a:	f7ff fd2f 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_InitTick+0x70>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ffdf 	bl	8002f4a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d809      	bhi.n	8001fac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 ff9b 	bl	8002eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_InitTick+0x74>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e007      	b.n	8001fbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e004      	b.n	8001fbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e001      	b.n	8001fbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000000c 	.word	0x2000000c
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	2000028c 	.word	0x2000028c

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	2000028c 	.word	0x2000028c

08002014 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0ed      	b.n	8002202 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fcde 	bl	80019f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002048:	f7ff ffd8 	bl	8001ffc <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800204e:	e012      	b.n	8002076 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002050:	f7ff ffd4 	bl	8001ffc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d90b      	bls.n	8002076 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0c5      	b.n	8002202 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0e5      	beq.n	8002050 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0202 	bic.w	r2, r2, #2
 8002092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002094:	f7ff ffb2 	bl	8001ffc <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800209a:	e012      	b.n	80020c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800209c:	f7ff ffae 	bl	8001ffc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b0a      	cmp	r3, #10
 80020a8:	d90b      	bls.n	80020c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e09f      	b.n	8002202 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e5      	bne.n	800209c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e1b      	ldrb	r3, [r3, #24]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e5b      	ldrb	r3, [r3, #25]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e9b      	ldrb	r3, [r3, #26]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e007      	b.n	800214e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0220 	bic.w	r2, r2, #32
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7edb      	ldrb	r3, [r3, #27]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0210 	bic.w	r2, r2, #16
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e007      	b.n	8002178 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0210 	orr.w	r2, r2, #16
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7f1b      	ldrb	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d108      	bne.n	8002192 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e007      	b.n	80021a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0208 	bic.w	r2, r2, #8
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7f5b      	ldrb	r3, [r3, #29]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0204 	orr.w	r2, r2, #4
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e007      	b.n	80021cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0204 	bic.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	ea42 0103 	orr.w	r1, r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002220:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d003      	beq.n	8002230 <HAL_CAN_ConfigFilter+0x26>
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b02      	cmp	r3, #2
 800222c:	f040 80aa 	bne.w	8002384 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2201      	movs	r2, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d123      	bne.n	80022b2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	401a      	ands	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800228c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3248      	adds	r2, #72	; 0x48
 8002292:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a8:	6979      	ldr	r1, [r7, #20]
 80022aa:	3348      	adds	r3, #72	; 0x48
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d122      	bne.n	8002300 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3248      	adds	r2, #72	; 0x48
 80022e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	3348      	adds	r3, #72	; 0x48
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800231a:	e007      	b.n	800232c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	431a      	orrs	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002346:	e007      	b.n	8002358 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	431a      	orrs	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002376:	f023 0201 	bic.w	r2, r3, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e006      	b.n	8002392 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d12e      	bne.n	8002410 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ca:	f7ff fe17 	bl	8001ffc <HAL_GetTick>
 80023ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023d0:	e012      	b.n	80023f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d2:	f7ff fe13 	bl	8001ffc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	d90b      	bls.n	80023f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e012      	b.n	800241e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e006      	b.n	800241e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002426:	b480      	push	{r7}
 8002428:	b089      	sub	sp, #36	; 0x24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d003      	beq.n	8002452 <HAL_CAN_AddTxMessage+0x2c>
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	2b02      	cmp	r3, #2
 800244e:	f040 80ad 	bne.w	80025ac <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8095 	beq.w	800259c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800247c:	2201      	movs	r2, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	409a      	lsls	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3318      	adds	r3, #24
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	440b      	add	r3, r1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e00f      	b.n	80024ca <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3318      	adds	r3, #24
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3318      	adds	r3, #24
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	440b      	add	r3, r1
 80024da:	3304      	adds	r3, #4
 80024dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	7d1b      	ldrb	r3, [r3, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d111      	bne.n	800250a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3318      	adds	r3, #24
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	6811      	ldr	r1, [r2, #0]
 80024fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3318      	adds	r3, #24
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	440b      	add	r3, r1
 8002506:	3304      	adds	r3, #4
 8002508:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3307      	adds	r3, #7
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3306      	adds	r3, #6
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3305      	adds	r3, #5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4313      	orrs	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	3204      	adds	r2, #4
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	4610      	mov	r0, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6811      	ldr	r1, [r2, #0]
 8002532:	ea43 0200 	orr.w	r2, r3, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	440b      	add	r3, r1
 800253c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002540:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3303      	adds	r3, #3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	061a      	lsls	r2, r3, #24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3302      	adds	r3, #2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	4313      	orrs	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	4610      	mov	r0, r2
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	6811      	ldr	r1, [r2, #0]
 8002568:	ea43 0200 	orr.w	r2, r3, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002576:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3318      	adds	r3, #24
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3318      	adds	r3, #24
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e00e      	b.n	80025ba <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e006      	b.n	80025ba <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025c6:	b480      	push	{r7}
 80025c8:	b087      	sub	sp, #28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_GetRxMessage+0x24>
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	f040 8103 	bne.w	80027f0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10e      	bne.n	800260e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0f7      	b.n	80027fe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0e8      	b.n	80027fe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	331b      	adds	r3, #27
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0204 	and.w	r2, r3, #4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	331b      	adds	r3, #27
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0d5b      	lsrs	r3, r3, #21
 800265a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00b      	b.n	800267c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	331b      	adds	r3, #27
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	4413      	add	r3, r2
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	331b      	adds	r3, #27
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0202 	and.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	331b      	adds	r3, #27
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2208      	movs	r2, #8
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	e00b      	b.n	80026ca <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	331b      	adds	r3, #27
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	331b      	adds	r3, #27
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	331b      	adds	r3, #27
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	3304      	adds	r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0c1b      	lsrs	r3, r3, #16
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0a1a      	lsrs	r2, r3, #8
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0c1a      	lsrs	r2, r3, #16
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3302      	adds	r3, #2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e1a      	lsrs	r2, r3, #24
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	3303      	adds	r3, #3
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	4413      	add	r3, r2
 8002768:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0a1a      	lsrs	r2, r3, #8
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3305      	adds	r3, #5
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4413      	add	r3, r2
 800279a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0c1a      	lsrs	r2, r3, #16
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	3306      	adds	r3, #6
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e1a      	lsrs	r2, r3, #24
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	3307      	adds	r3, #7
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	e007      	b.n	80027ec <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e006      	b.n	80027fe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d002      	beq.n	800282c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d10f      	bne.n	800284c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e005      	b.n	800284c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <HAL_CAN_ActivateNotification+0x1e>
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d109      	bne.n	800288c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6959      	ldr	r1, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e006      	b.n	800289a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08a      	sub	sp, #40	; 0x28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d07c      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d023      	beq.n	800293e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe fe83 	bl	8001614 <HAL_CAN_TxMailbox0CompleteCallback>
 800290e:	e016      	b.n	800293e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e00c      	b.n	800293e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e002      	b.n	800293e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f97f 	bl	8002c3c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d024      	beq.n	8002992 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002950:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f959 	bl	8002c14 <HAL_CAN_TxMailbox1CompleteCallback>
 8002962:	e016      	b.n	8002992 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	e00c      	b.n	8002992 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e002      	b.n	8002992 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f95f 	bl	8002c50 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d024      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f939 	bl	8002c28 <HAL_CAN_TxMailbox2CompleteCallback>
 80029b6:	e016      	b.n	80029e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e00c      	b.n	80029e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e002      	b.n	80029e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f93f 	bl	8002c64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2210      	movs	r2, #16
 8002a08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2208      	movs	r2, #8
 8002a24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f926 	bl	8002c78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe fe29 	bl	800169c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f908 	bl	8002ca0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8ef 	bl	8002c8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8f2 	bl	8002cb4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2208      	movs	r2, #8
 8002aea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8eb 	bl	8002cc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d07b      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d072      	beq.n	8002bec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d043      	beq.n	8002bec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03e      	beq.n	8002bec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d02b      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x32a>
 8002b78:	2b60      	cmp	r3, #96	; 0x60
 8002b7a:	d82e      	bhi.n	8002bda <HAL_CAN_IRQHandler+0x334>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d022      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x320>
 8002b80:	2b50      	cmp	r3, #80	; 0x50
 8002b82:	d82a      	bhi.n	8002bda <HAL_CAN_IRQHandler+0x334>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d019      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x316>
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d826      	bhi.n	8002bda <HAL_CAN_IRQHandler+0x334>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d010      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x30c>
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d822      	bhi.n	8002bda <HAL_CAN_IRQHandler+0x334>
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d002      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x2f8>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d005      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b9c:	e01d      	b.n	8002bda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba6:	e019      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb0:	e014      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bba:	e00f      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc4:	e00a      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bce:	e005      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd8:	e000      	b.n	8002bdc <HAL_CAN_IRQHandler+0x336>
            break;
 8002bda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fd26 	bl	8001658 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db12      	blt.n	8002db4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	490a      	ldr	r1, [pc, #40]	; (8002dc0 <__NVIC_DisableIRQ+0x44>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	3320      	adds	r3, #32
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002da8:	f3bf 8f4f 	dsb	sy
}
 8002dac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dae:	f3bf 8f6f 	isb	sy
}
 8002db2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	; (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d301      	bcc.n	8002e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <SysTick_Config+0x40>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f7ff ff8e 	bl	8002dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SysTick_Config+0x40>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <SysTick_Config+0x40>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff05 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eec:	f7ff ff1a 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff8e 	bl	8002e18 <NVIC_EncodePriority>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff5d 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff0d 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff1d 	bl	8002d7c <__NVIC_DisableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff94 	bl	8002e80 <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d005      	beq.n	8002f86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e029      	b.n	8002fda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 020e 	bic.w	r2, r2, #14
 8002f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f003 021c 	and.w	r2, r3, #28
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
    }
  }
  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ff2:	b2db      	uxtb	r3, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	e154      	b.n	80032ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8146 	beq.w	80032b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x40>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d123      	bne.n	8003132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a0 	beq.w	80032b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003174:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	4a57      	ldr	r2, [pc, #348]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6613      	str	r3, [r2, #96]	; 0x60
 8003180:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x2dc>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d019      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a49      	ldr	r2, [pc, #292]	; (80032e0 <HAL_GPIO_Init+0x2e0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00d      	beq.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <HAL_GPIO_Init+0x1e0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a46      	ldr	r2, [pc, #280]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_GPIO_Init+0x1dc>
 80031d8:	2304      	movs	r3, #4
 80031da:	e008      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031dc:	2307      	movs	r3, #7
 80031de:	e006      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e0:	2303      	movs	r3, #3
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031ec:	2300      	movs	r3, #0
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031fe:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_GPIO_Init+0x2dc>)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800320c:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800325a:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f aea3 	bne.w	8003010 <HAL_GPIO_Init+0x10>
  }
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48001000 	.word	0x48001000
 80032f0:	40010400 	.word	0x40010400

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003310:	e002      	b.n	8003318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e08d      	b.n	8003452 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fbcc 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e006      	b.n	80033ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d108      	bne.n	80033c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e007      	b.n	80033d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69d9      	ldr	r1, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	817b      	strh	r3, [r7, #10]
 800346e:	460b      	mov	r3, r1
 8003470:	813b      	strh	r3, [r7, #8]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b20      	cmp	r3, #32
 8003480:	f040 80f9 	bne.w	8003676 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_I2C_Mem_Write+0x34>
 800348a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0ed      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_I2C_Mem_Write+0x4e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0e6      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034b2:	f7fe fda3 	bl	8001ffc <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2319      	movs	r3, #25
 80034be:	2201      	movs	r2, #1
 80034c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 ffec 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0d1      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2221      	movs	r2, #33	; 0x21
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034fc:	88f8      	ldrh	r0, [r7, #6]
 80034fe:	893a      	ldrh	r2, [r7, #8]
 8003500:	8979      	ldrh	r1, [r7, #10]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4603      	mov	r3, r0
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fb81 	bl	8003c14 <I2C_RequestMemoryWrite>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0a9      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2bff      	cmp	r3, #255	; 0xff
 800352c:	d90e      	bls.n	800354c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	b2da      	uxtb	r2, r3
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	2300      	movs	r3, #0
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f001 f965 	bl	8004814 <I2C_TransferConfig>
 800354a:	e00f      	b.n	800356c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	b2da      	uxtb	r2, r3
 800355c:	8979      	ldrh	r1, [r7, #10]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f001 f954 	bl	8004814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 ffe5 	bl	8004540 <I2C_WaitOnTXISFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e07b      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d034      	beq.n	8003624 <HAL_I2C_Mem_Write+0x1c8>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d130      	bne.n	8003624 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	2200      	movs	r2, #0
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 ff68 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e04d      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2bff      	cmp	r3, #255	; 0xff
 80035e4:	d90e      	bls.n	8003604 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	22ff      	movs	r2, #255	; 0xff
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	8979      	ldrh	r1, [r7, #10]
 80035f4:	2300      	movs	r3, #0
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f001 f909 	bl	8004814 <I2C_TransferConfig>
 8003602:	e00f      	b.n	8003624 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	b2da      	uxtb	r2, r3
 8003614:	8979      	ldrh	r1, [r7, #10]
 8003616:	2300      	movs	r3, #0
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 f8f8 	bl	8004814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d19e      	bne.n	800356c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 ffcb 	bl	80045ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01a      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2220      	movs	r2, #32
 8003648:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_I2C_Mem_Write+0x224>)
 8003656:	400b      	ands	r3, r1
 8003658:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	fe00e800 	.word	0xfe00e800

08003684 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	f040 80fd 	bne.w	80038a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_I2C_Mem_Read+0x34>
 80036b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0f1      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Mem_Read+0x4e>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0ea      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036da:	f7fe fc8f 	bl	8001ffc <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2319      	movs	r3, #25
 80036e6:	2201      	movs	r2, #1
 80036e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fed8 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0d5      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2222      	movs	r2, #34	; 0x22
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003724:	88f8      	ldrh	r0, [r7, #6]
 8003726:	893a      	ldrh	r2, [r7, #8]
 8003728:	8979      	ldrh	r1, [r7, #10]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4603      	mov	r3, r0
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fac1 	bl	8003cbc <I2C_RequestMemoryRead>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0ad      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d90e      	bls.n	8003774 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	b2da      	uxtb	r2, r3
 8003762:	8979      	ldrh	r1, [r7, #10]
 8003764:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <HAL_I2C_Mem_Read+0x22c>)
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f001 f851 	bl	8004814 <I2C_TransferConfig>
 8003772:	e00f      	b.n	8003794 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_I2C_Mem_Read+0x22c>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f001 f840 	bl	8004814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2200      	movs	r2, #0
 800379c:	2104      	movs	r1, #4
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fe7f 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07c      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d034      	beq.n	8003854 <HAL_I2C_Mem_Read+0x1d0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d130      	bne.n	8003854 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fe50 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04d      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2bff      	cmp	r3, #255	; 0xff
 8003814:	d90e      	bls.n	8003834 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	b2da      	uxtb	r2, r3
 8003822:	8979      	ldrh	r1, [r7, #10]
 8003824:	2300      	movs	r3, #0
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fff1 	bl	8004814 <I2C_TransferConfig>
 8003832:	e00f      	b.n	8003854 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	b2da      	uxtb	r2, r3
 8003844:	8979      	ldrh	r1, [r7, #10]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 ffe0 	bl	8004814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d19a      	bne.n	8003794 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 feb3 	bl	80045ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e01a      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_I2C_Mem_Read+0x230>)
 8003886:	400b      	ands	r3, r1
 8003888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	80002400 	.word	0x80002400
 80038b4:	fe00e800 	.word	0xfe00e800

080038b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
  }
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00f      	beq.n	8003958 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f043 0208 	orr.w	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003956:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00f      	beq.n	8003982 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003980:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 030b 	and.w	r3, r3, #11
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fc2b 	bl	80041f0 <I2C_ITError>
  }
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
 80039d6:	4613      	mov	r3, r2
 80039d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <I2C_Slave_ISR_IT+0x24>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0e1      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1e8>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fa5d 	bl	8003f24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d04b      	beq.n	8003b0c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d046      	beq.n	8003b0c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d128      	bne.n	8003ada <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b28      	cmp	r3, #40	; 0x28
 8003a92:	d108      	bne.n	8003aa6 <I2C_Slave_ISR_IT+0x84>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a9a:	d104      	bne.n	8003aa6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a9c:	6939      	ldr	r1, [r7, #16]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fb52 	bl	8004148 <I2C_ITListenCplt>
 8003aa4:	e031      	b.n	8003b0a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b29      	cmp	r3, #41	; 0x29
 8003ab0:	d10e      	bne.n	8003ad0 <I2C_Slave_ISR_IT+0xae>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab8:	d00a      	beq.n	8003ad0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fcab 	bl	800441e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f9cf 	bl	8003e6c <I2C_ITSlaveSeqCplt>
 8003ace:	e01c      	b.n	8003b0a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ad8:	e08f      	b.n	8003bfa <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <I2C_Slave_ISR_IT+0xda>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003afa:	d17e      	bne.n	8003bfa <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	4619      	mov	r1, r3
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fb74 	bl	80041f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b08:	e077      	b.n	8003bfa <I2C_Slave_ISR_IT+0x1d8>
 8003b0a:	e076      	b.n	8003bfa <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d02f      	beq.n	8003b76 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02a      	beq.n	8003b76 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d14b      	bne.n	8003bfe <I2C_Slave_ISR_IT+0x1dc>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b6c:	d047      	beq.n	8003bfe <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f97c 	bl	8003e6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b74:	e043      	b.n	8003bfe <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b8a:	6939      	ldr	r1, [r7, #16]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8e9 	bl	8003d64 <I2C_ITAddrCplt>
 8003b92:	e035      	b.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d030      	beq.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02b      	beq.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
 8003be2:	e00d      	b.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bea:	d002      	beq.n	8003bf2 <I2C_Slave_ISR_IT+0x1d0>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f93a 	bl	8003e6c <I2C_ITSlaveSeqCplt>
 8003bf8:	e002      	b.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003bfe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <I2C_RequestMemoryWrite+0xa4>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fde9 	bl	8004814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fc7a 	bl	8004540 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e02c      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
 8003c66:	e015      	b.n	8003c94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fc60 	bl	8004540 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e012      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fbff 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	80002000 	.word	0x80002000

08003cbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <I2C_RequestMemoryRead+0xa4>)
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fd96 	bl	8004814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fc27 	bl	8004540 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e02c      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0c:	e015      	b.n	8003d3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	69b9      	ldr	r1, [r7, #24]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fc0d 	bl	8004540 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e012      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2140      	movs	r1, #64	; 0x40
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fbac 	bl	80044a2 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	80002000 	.word	0x80002000

08003d64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d7a:	2b28      	cmp	r3, #40	; 0x28
 8003d7c:	d16a      	bne.n	8003e54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003daa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003db8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d138      	bne.n	8003e34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	09db      	lsrs	r3, r3, #7
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	89bb      	ldrh	r3, [r7, #12]
 8003dca:	4053      	eors	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f003 0306 	and.w	r3, r3, #6
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11c      	bne.n	8003e10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d13b      	bne.n	8003e64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2208      	movs	r2, #8
 8003df8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e02:	89ba      	ldrh	r2, [r7, #12]
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fdde 	bl	80039ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e0e:	e029      	b.n	8003e64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fd2d 	bl	8004878 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e26:	89ba      	ldrh	r2, [r7, #12]
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fdcc 	bl	80039ca <HAL_I2C_AddrCallback>
}
 8003e32:	e017      	b.n	8003e64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fd1d 	bl	8004878 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e46:	89ba      	ldrh	r2, [r7, #12]
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fdbc 	bl	80039ca <HAL_I2C_AddrCallback>
}
 8003e52:	e007      	b.n	8003e64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e00c      	b.n	8003eba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b29      	cmp	r3, #41	; 0x29
 8003ec4:	d112      	bne.n	8003eec <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2228      	movs	r2, #40	; 0x28
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2221      	movs	r2, #33	; 0x21
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fcce 	bl	8004878 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fd5c 	bl	80039a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003eea:	e017      	b.n	8003f1c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d111      	bne.n	8003f1c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2228      	movs	r2, #40	; 0x28
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2222      	movs	r2, #34	; 0x22
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f06:	2102      	movs	r1, #2
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fcb5 	bl	8004878 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fd4d 	bl	80039b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2220      	movs	r2, #32
 8003f48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d002      	beq.n	8003f56 <I2C_ITSlaveCplt+0x32>
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b29      	cmp	r3, #41	; 0x29
 8003f54:	d108      	bne.n	8003f68 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f56:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fc8c 	bl	8004878 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2221      	movs	r2, #33	; 0x21
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
 8003f66:	e019      	b.n	8003f9c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	d002      	beq.n	8003f74 <I2C_ITSlaveCplt+0x50>
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b2a      	cmp	r3, #42	; 0x2a
 8003f72:	d108      	bne.n	8003f86 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f74:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fc7d 	bl	8004878 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2222      	movs	r2, #34	; 0x22
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
 8003f84:	e00a      	b.n	8003f9c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b28      	cmp	r3, #40	; 0x28
 8003f8a:	d107      	bne.n	8003f9c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003f8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fc71 	bl	8004878 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003faa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b62      	ldr	r3, [pc, #392]	; (8004140 <I2C_ITSlaveCplt+0x21c>)
 8003fb8:	400b      	ands	r3, r1
 8003fba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa2e 	bl	800441e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01f      	beq.n	8004024 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff2:	e017      	b.n	8004024 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d020      	beq.n	8004070 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f043 0204 	orr.w	r2, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8a4 	bl	80041f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d141      	bne.n	8004138 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f846 	bl	8004148 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040bc:	e03c      	b.n	8004138 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c6:	d014      	beq.n	80040f2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fecf 	bl	8003e6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <I2C_ITSlaveCplt+0x220>)
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fc7b 	bl	80039e6 <HAL_I2C_ListenCpltCallback>
}
 80040f0:	e022      	b.n	8004138 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	; 0x22
 80040fc:	d10e      	bne.n	800411c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fc4e 	bl	80039b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800411a:	e00d      	b.n	8004138 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fc35 	bl	80039a2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	fe00e800 	.word	0xfe00e800
 8004144:	ffff0000 	.word	0xffff0000

08004148 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a25      	ldr	r2, [pc, #148]	; (80041ec <I2C_ITListenCplt+0xa4>)
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d022      	beq.n	80041c4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d012      	beq.n	80041c4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	f043 0204 	orr.w	r2, r3, #4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb55 	bl	8004878 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fc01 	bl	80039e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	ffff0000 	.word	0xffff0000

080041f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004200:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a6d      	ldr	r2, [pc, #436]	; (80043c4 <I2C_ITError+0x1d4>)
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b28      	cmp	r3, #40	; 0x28
 8004226:	d005      	beq.n	8004234 <I2C_ITError+0x44>
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b29      	cmp	r3, #41	; 0x29
 800422c:	d002      	beq.n	8004234 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b2a      	cmp	r3, #42	; 0x2a
 8004232:	d10b      	bne.n	800424c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004234:	2103      	movs	r1, #3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fb1e 	bl	8004878 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2228      	movs	r2, #40	; 0x28
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a60      	ldr	r2, [pc, #384]	; (80043c8 <I2C_ITError+0x1d8>)
 8004248:	635a      	str	r2, [r3, #52]	; 0x34
 800424a:	e030      	b.n	80042ae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800424c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fb11 	bl	8004878 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8e1 	bl	800441e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d01f      	beq.n	80042a8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d114      	bne.n	80042a8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	d109      	bne.n	80042a0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f043 0204 	orr.w	r2, r3, #4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2220      	movs	r2, #32
 80042a6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d039      	beq.n	8004330 <I2C_ITError+0x140>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b11      	cmp	r3, #17
 80042c0:	d002      	beq.n	80042c8 <I2C_ITError+0xd8>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b21      	cmp	r3, #33	; 0x21
 80042c6:	d133      	bne.n	8004330 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d6:	d107      	bne.n	80042e8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fe79 	bl	8002fe4 <HAL_DMA_GetState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d017      	beq.n	8004328 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	4a33      	ldr	r2, [pc, #204]	; (80043cc <I2C_ITError+0x1dc>)
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fe28 	bl	8002f62 <HAL_DMA_Abort_IT>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d04d      	beq.n	80043b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004322:	4610      	mov	r0, r2
 8004324:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004326:	e045      	b.n	80043b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f851 	bl	80043d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800432e:	e041      	b.n	80043b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d039      	beq.n	80043ac <I2C_ITError+0x1bc>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b12      	cmp	r3, #18
 800433c:	d002      	beq.n	8004344 <I2C_ITError+0x154>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b22      	cmp	r3, #34	; 0x22
 8004342:	d133      	bne.n	80043ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d107      	bne.n	8004364 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004362:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe fe3b 	bl	8002fe4 <HAL_DMA_GetState>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d017      	beq.n	80043a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004378:	4a14      	ldr	r2, [pc, #80]	; (80043cc <I2C_ITError+0x1dc>)
 800437a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fdea 	bl	8002f62 <HAL_DMA_Abort_IT>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d011      	beq.n	80043b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800439e:	4610      	mov	r0, r2
 80043a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043a2:	e009      	b.n	80043b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f813 	bl	80043d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043aa:	e005      	b.n	80043b8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f80f 	bl	80043d0 <I2C_TreatErrorCallback>
  }
}
 80043b2:	e002      	b.n	80043ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043b8:	bf00      	nop
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	ffff0000 	.word	0xffff0000
 80043c8:	08003a23 	.word	0x08003a23
 80043cc:	08004467 	.word	0x08004467

080043d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b60      	cmp	r3, #96	; 0x60
 80043e2:	d10e      	bne.n	8004402 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fb07 	bl	8003a0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004400:	e009      	b.n	8004416 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff faf2 	bl	80039fa <HAL_I2C_ErrorCallback>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d103      	bne.n	800443c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d007      	beq.n	800445a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	619a      	str	r2, [r3, #24]
  }
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2200      	movs	r2, #0
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	2200      	movs	r2, #0
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff ff9b 	bl	80043d0 <I2C_TreatErrorCallback>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b2:	e031      	b.n	8004518 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d02d      	beq.n	8004518 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fd fd9e 	bl	8001ffc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d122      	bne.n	8004518 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d113      	bne.n	8004518 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e00f      	b.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	429a      	cmp	r2, r3
 8004534:	d0be      	beq.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800454c:	e033      	b.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f87e 	bl	8004654 <I2C_IsErrorOccurred>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e031      	b.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d025      	beq.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fd fd47 	bl	8001ffc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11a      	bne.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d013      	beq.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d1c4      	bne.n	800454e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045da:	e02f      	b.n	800463c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f837 	bl	8004654 <I2C_IsErrorOccurred>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e02d      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fd fd04 	bl	8001ffc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11a      	bne.n	800463c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d013      	beq.n	800463c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d1c8      	bne.n	80045dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d068      	beq.n	8004752 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2210      	movs	r2, #16
 8004686:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004688:	e049      	b.n	800471e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d045      	beq.n	800471e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fd fcb3 	bl	8001ffc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <I2C_IsErrorOccurred+0x54>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d13a      	bne.n	800471e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ca:	d121      	bne.n	8004710 <I2C_IsErrorOccurred+0xbc>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d2:	d01d      	beq.n	8004710 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d01a      	beq.n	8004710 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046ea:	f7fd fc87 	bl	8001ffc <HAL_GetTick>
 80046ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f0:	e00e      	b.n	8004710 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046f2:	f7fd fc83 	bl	8001ffc <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b19      	cmp	r3, #25
 80046fe:	d907      	bls.n	8004710 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800470e:	e006      	b.n	800471e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d1e9      	bne.n	80046f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d003      	beq.n	8004734 <I2C_IsErrorOccurred+0xe0>
 800472c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0aa      	beq.n	800468a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2220      	movs	r2, #32
 8004742:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f043 0308 	orr.w	r3, r3, #8
 800478c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004796:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01c      	beq.n	8004802 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fe28 	bl	800441e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <I2C_IsErrorOccurred+0x1bc>)
 80047da:	400b      	ands	r3, r1
 80047dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004806:	4618      	mov	r0, r3
 8004808:	3728      	adds	r7, #40	; 0x28
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	fe00e800 	.word	0xfe00e800

08004814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	4613      	mov	r3, r2
 8004824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800482c:	7a7b      	ldrb	r3, [r7, #9]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004834:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	4313      	orrs	r3, r2
 800483e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004842:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	0d5b      	lsrs	r3, r3, #21
 800484e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <I2C_TransferConfig+0x60>)
 8004854:	430b      	orrs	r3, r1
 8004856:	43db      	mvns	r3, r3
 8004858:	ea02 0103 	and.w	r1, r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	03ff63ff 	.word	0x03ff63ff

08004878 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00f      	beq.n	80048b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004898:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048a6:	2b28      	cmp	r3, #40	; 0x28
 80048a8:	d003      	beq.n	80048b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00f      	beq.n	80048dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048d0:	2b28      	cmp	r3, #40	; 0x28
 80048d2:	d003      	beq.n	80048dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	da03      	bge.n	80048ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d103      	bne.n	80048fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d103      	bne.n	8004908 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d103      	bne.n	8004916 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004914:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43da      	mvns	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	400a      	ands	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b20      	cmp	r3, #32
 8004948:	d138      	bne.n	80049bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004954:	2302      	movs	r3, #2
 8004956:	e032      	b.n	80049be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d139      	bne.n	8004a54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e033      	b.n	8004a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2224      	movs	r2, #36	; 0x24
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40007000 	.word	0x40007000

08004a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8e:	d130      	bne.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d038      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2232      	movs	r2, #50	; 0x32
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac4:	e002      	b.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d102      	bne.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f2      	bne.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d110      	bne.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d007      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40007000 	.word	0x40007000
 8004b24:	20000004 	.word	0x20000004
 8004b28:	431bde83 	.word	0x431bde83

08004b2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f000 bc02 	b.w	8005344 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b40:	4b96      	ldr	r3, [pc, #600]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b4a:	4b94      	ldr	r3, [pc, #592]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80e4 	beq.w	8004d2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4c>
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	f040 808b 	bne.w	8004c86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f040 8087 	bne.w	8004c86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b78:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_OscConfig+0x64>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e3d9      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_RCC_OscConfig+0x7e>
 8004ba0:	4b7e      	ldr	r3, [pc, #504]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCC_OscConfig+0x8a>
 8004baa:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d223      	bcs.n	8004c02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fd8c 	bl	80056dc <RCC_SetFlashLatencyFromMSIRange>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e3ba      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bce:	4b73      	ldr	r3, [pc, #460]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a72      	ldr	r2, [pc, #456]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b70      	ldr	r3, [pc, #448]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	496d      	ldr	r1, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bec:	4b6b      	ldr	r3, [pc, #428]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	4968      	ldr	r1, [pc, #416]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
 8004c00:	e025      	b.n	8004c4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c02:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4960      	ldr	r1, [pc, #384]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	495b      	ldr	r1, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fd4c 	bl	80056dc <RCC_SetFlashLatencyFromMSIRange>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e37a      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c4e:	f000 fc81 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	4950      	ldr	r1, [pc, #320]	; (8004da0 <HAL_RCC_OscConfig+0x274>)
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6a:	4a4e      	ldr	r2, [pc, #312]	; (8004da4 <HAL_RCC_OscConfig+0x278>)
 8004c6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c6e:	4b4e      	ldr	r3, [pc, #312]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd f972 	bl	8001f5c <HAL_InitTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d052      	beq.n	8004d28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	e35e      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d032      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c8e:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a42      	ldr	r2, [pc, #264]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd f9af 	bl	8001ffc <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca2:	f7fd f9ab 	bl	8001ffc <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e347      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cc6:	f043 0308 	orr.w	r3, r3, #8
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4930      	ldr	r1, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	492b      	ldr	r1, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
 8004cf2:	e01a      	b.n	8004d2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d00:	f7fd f97c 	bl	8001ffc <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d08:	f7fd f978 	bl	8001ffc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e314      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1dc>
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d073      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_OscConfig+0x21c>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d10e      	bne.n	8004d60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d063      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2f0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d15f      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e2f1      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d68:	d106      	bne.n	8004d78 <HAL_RCC_OscConfig+0x24c>
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e025      	b.n	8004dc4 <HAL_RCC_OscConfig+0x298>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d80:	d114      	bne.n	8004dac <HAL_RCC_OscConfig+0x280>
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e013      	b.n	8004dc4 <HAL_RCC_OscConfig+0x298>
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08007a8c 	.word	0x08007a8c
 8004da4:	20000004 	.word	0x20000004
 8004da8:	20000008 	.word	0x20000008
 8004dac:	4ba0      	ldr	r3, [pc, #640]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a9f      	ldr	r2, [pc, #636]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a9c      	ldr	r2, [pc, #624]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd f916 	bl	8001ffc <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fd f912 	bl	8001ffc <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e2ae      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2a8>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd f902 	bl	8001ffc <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fd f8fe 	bl	8001ffc <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e29a      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2d0>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d060      	beq.n	8004eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_OscConfig+0x310>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d116      	bne.n	8004e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_OscConfig+0x328>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e277      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b76      	ldr	r3, [pc, #472]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	4973      	ldr	r1, [pc, #460]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e68:	e040      	b.n	8004eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d023      	beq.n	8004eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e72:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd f8bd 	bl	8001ffc <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fd f8b9 	bl	8001ffc <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e255      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e98:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea4:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	495f      	ldr	r1, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e018      	b.n	8004eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a5c      	ldr	r2, [pc, #368]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd f899 	bl	8001ffc <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fd f895 	bl	8001ffc <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e231      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee0:	4b53      	ldr	r3, [pc, #332]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03c      	beq.n	8004f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f06:	4a4a      	ldr	r2, [pc, #296]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fd f874 	bl	8001ffc <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f18:	f7fd f870 	bl	8001ffc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e20c      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x3ec>
 8004f38:	e01b      	b.n	8004f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fd f857 	bl	8001ffc <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f52:	f7fd f853 	bl	8001ffc <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1ef      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ef      	bne.n	8004f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a6 	beq.w	80050cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d118      	bne.n	8004fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc4:	f7fd f81a 	bl	8001ffc <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fd f816 	bl	8001ffc <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e1b2      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_RCC_OscConfig+0x4d8>
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005002:	e029      	b.n	8005058 <HAL_RCC_OscConfig+0x52c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b05      	cmp	r3, #5
 800500a:	d115      	bne.n	8005038 <HAL_RCC_OscConfig+0x50c>
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	4a07      	ldr	r2, [pc, #28]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	4a03      	ldr	r2, [pc, #12]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502c:	e014      	b.n	8005058 <HAL_RCC_OscConfig+0x52c>
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
 8005038:	4b9a      	ldr	r3, [pc, #616]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	4a99      	ldr	r2, [pc, #612]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005048:	4b96      	ldr	r3, [pc, #600]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	4a95      	ldr	r2, [pc, #596]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc ffcc 	bl	8001ffc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc ffc8 	bl	8001ffc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e162      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507e:	4b89      	ldr	r3, [pc, #548]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ed      	beq.n	8005068 <HAL_RCC_OscConfig+0x53c>
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fc ffb5 	bl	8001ffc <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fc ffb1 	bl	8001ffc <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e14b      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ac:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ed      	bne.n	8005096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c0:	4b78      	ldr	r3, [pc, #480]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	4a77      	ldr	r2, [pc, #476]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80050c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d03c      	beq.n	8005152 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01c      	beq.n	800511a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050e0:	4b70      	ldr	r3, [pc, #448]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80050e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e6:	4a6f      	ldr	r2, [pc, #444]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fc ff84 	bl	8001ffc <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f8:	f7fc ff80 	bl	8001ffc <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e11c      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800510a:	4b66      	ldr	r3, [pc, #408]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800510c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ef      	beq.n	80050f8 <HAL_RCC_OscConfig+0x5cc>
 8005118:	e01b      	b.n	8005152 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800511a:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800511c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005120:	4a60      	ldr	r2, [pc, #384]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fc ff67 	bl	8001ffc <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005132:	f7fc ff63 	bl	8001ffc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e0ff      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005144:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1ef      	bne.n	8005132 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80f3 	beq.w	8005342 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	2b02      	cmp	r3, #2
 8005162:	f040 80c9 	bne.w	80052f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005166:	4b4f      	ldr	r3, [pc, #316]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	429a      	cmp	r2, r3
 8005178:	d12c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	3b01      	subs	r3, #1
 8005186:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d123      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d11b      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d113      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	3b01      	subs	r3, #1
 80051ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d109      	bne.n	80051d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d06b      	beq.n	80052ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d062      	beq.n	80052a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051da:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0ac      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2d      	ldr	r2, [pc, #180]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 80051f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051f6:	f7fc ff01 	bl	8001ffc <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fc fefd 	bl	8001ffc <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e099      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005210:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800521c:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCC_OscConfig+0x77c>)
 8005222:	4013      	ands	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800522c:	3a01      	subs	r2, #1
 800522e:	0112      	lsls	r2, r2, #4
 8005230:	4311      	orrs	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005236:	0212      	lsls	r2, r2, #8
 8005238:	4311      	orrs	r1, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800523e:	0852      	lsrs	r2, r2, #1
 8005240:	3a01      	subs	r2, #1
 8005242:	0552      	lsls	r2, r2, #21
 8005244:	4311      	orrs	r1, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0652      	lsls	r2, r2, #25
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005256:	06d2      	lsls	r2, r2, #27
 8005258:	430a      	orrs	r2, r1
 800525a:	4912      	ldr	r1, [pc, #72]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800525c:	4313      	orrs	r3, r2
 800525e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800526a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005276:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005278:	f7fc fec0 	bl	8001ffc <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc febc 	bl	8001ffc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e058      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCC_OscConfig+0x778>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800529e:	e050      	b.n	8005342 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04f      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
 80052a4:	40021000 	.word	0x40021000
 80052a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d144      	bne.n	8005342 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a23      	ldr	r2, [pc, #140]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a20      	ldr	r2, [pc, #128]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052d0:	f7fc fe94 	bl	8001ffc <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fc fe90 	bl	8001ffc <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e02c      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ea:	4b18      	ldr	r3, [pc, #96]	; (800534c <HAL_RCC_OscConfig+0x820>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x7ac>
 80052f6:	e024      	b.n	8005342 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d01f      	beq.n	800533e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RCC_OscConfig+0x820>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <HAL_RCC_OscConfig+0x820>)
 8005304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fc fe77 	bl	8001ffc <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005312:	f7fc fe73 	bl	8001ffc <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e00f      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_OscConfig+0x820>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_RCC_OscConfig+0x820>)
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4905      	ldr	r1, [pc, #20]	; (800534c <HAL_RCC_OscConfig+0x820>)
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCC_OscConfig+0x824>)
 8005338:	4013      	ands	r3, r2
 800533a:	60cb      	str	r3, [r1, #12]
 800533c:	e001      	b.n	8005342 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	feeefffc 	.word	0xfeeefffc

08005354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0e7      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b75      	ldr	r3, [pc, #468]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b72      	ldr	r3, [pc, #456]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 0207 	bic.w	r2, r3, #7
 800537e:	4970      	ldr	r1, [pc, #448]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b6e      	ldr	r3, [pc, #440]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0cf      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b66      	ldr	r3, [pc, #408]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d908      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b63      	ldr	r3, [pc, #396]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4960      	ldr	r1, [pc, #384]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04c      	beq.n	800546c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d121      	bne.n	800542a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0a6      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f2:	4b54      	ldr	r3, [pc, #336]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d115      	bne.n	800542a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e09a      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800540a:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e08e      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800541a:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e086      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800542a:	4b46      	ldr	r3, [pc, #280]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4943      	ldr	r1, [pc, #268]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543c:	f7fc fdde 	bl	8001ffc <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e00a      	b.n	800545a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fc fdda 	bl	8001ffc <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e06e      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 020c 	and.w	r2, r3, #12
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	429a      	cmp	r2, r3
 800546a:	d1eb      	bne.n	8005444 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005484:	429a      	cmp	r2, r3
 8005486:	d208      	bcs.n	800549a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	492b      	ldr	r1, [pc, #172]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d210      	bcs.n	80054ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 0207 	bic.w	r2, r3, #7
 80054b0:	4923      	ldr	r1, [pc, #140]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_RCC_ClockConfig+0x1ec>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e036      	b.n	8005538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4918      	ldr	r1, [pc, #96]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4910      	ldr	r1, [pc, #64]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005508:	f000 f824 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_ClockConfig+0x1f0>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	490b      	ldr	r1, [pc, #44]	; (8005548 <HAL_RCC_ClockConfig+0x1f4>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1f8>)
 8005526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005528:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1fc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc fd15 	bl	8001f5c <HAL_InitTick>
 8005532:	4603      	mov	r3, r0
 8005534:	72fb      	strb	r3, [r7, #11]

  return status;
 8005536:	7afb      	ldrb	r3, [r7, #11]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	08007a8c 	.word	0x08007a8c
 800554c:	20000004 	.word	0x20000004
 8005550:	20000008 	.word	0x20000008

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556c:	4b3b      	ldr	r3, [pc, #236]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x34>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d121      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11e      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005588:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005594:	4b31      	ldr	r3, [pc, #196]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055b0:	4a2b      	ldr	r2, [pc, #172]	; (8005660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d102      	bne.n	80055d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	e004      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d8:	4b23      	ldr	r3, [pc, #140]	; (8005668 <HAL_RCC_GetSysClockFreq+0x114>)
 80055da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d134      	bne.n	800564c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d003      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0xa6>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d003      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0xac>
 80055f8:	e005      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_RCC_GetSysClockFreq+0x110>)
 80055fc:	617b      	str	r3, [r7, #20]
      break;
 80055fe:	e005      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005600:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_RCC_GetSysClockFreq+0x114>)
 8005602:	617b      	str	r3, [r7, #20]
      break;
 8005604:	e002      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	617b      	str	r3, [r7, #20]
      break;
 800560a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560c:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	fb03 f202 	mul.w	r2, r3, r2
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	0e5b      	lsrs	r3, r3, #25
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	3301      	adds	r3, #1
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800564c:	69bb      	ldr	r3, [r7, #24]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3724      	adds	r7, #36	; 0x24
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
 8005660:	08007aa4 	.word	0x08007aa4
 8005664:	00f42400 	.word	0x00f42400
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCC_GetHCLKFreq+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000004 	.word	0x20000004

08005684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005688:	f7ff fff0 	bl	800566c <HAL_RCC_GetHCLKFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	4904      	ldr	r1, [pc, #16]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	08007a9c 	.word	0x08007a9c

080056b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056b4:	f7ff ffda 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	0adb      	lsrs	r3, r3, #11
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	4904      	ldr	r1, [pc, #16]	; (80056d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000
 80056d8:	08007a9c 	.word	0x08007a9c

080056dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056f4:	f7ff f9b6 	bl	8004a64 <HAL_PWREx_GetVoltageRange>
 80056f8:	6178      	str	r0, [r7, #20]
 80056fa:	e014      	b.n	8005726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6593      	str	r3, [r2, #88]	; 0x58
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005714:	f7ff f9a6 	bl	8004a64 <HAL_PWREx_GetVoltageRange>
 8005718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d10b      	bne.n	8005746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d919      	bls.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2ba0      	cmp	r3, #160	; 0xa0
 8005738:	d902      	bls.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800573a:	2302      	movs	r3, #2
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	e013      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005740:	2301      	movs	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e010      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d902      	bls.n	8005752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800574c:	2303      	movs	r3, #3
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	e00a      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d102      	bne.n	800575e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005758:	2302      	movs	r3, #2
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e004      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b70      	cmp	r3, #112	; 0x70
 8005762:	d101      	bne.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005764:	2301      	movs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 0207 	bic.w	r2, r3, #7
 8005770:	4909      	ldr	r1, [pc, #36]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d001      	beq.n	800578a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40021000 	.word	0x40021000
 8005798:	40022000 	.word	0x40022000

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d031      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c0:	d01a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c6:	d814      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d0:	d10f      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057d2:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a5c      	ldr	r2, [pc, #368]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057de:	e00c      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa44 	bl	8005c74 <RCCEx_PLLSAI1_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f0:	e003      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	74fb      	strb	r3, [r7, #19]
      break;
 80057f6:	e000      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005800:	4b51      	ldr	r3, [pc, #324]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	494e      	ldr	r1, [pc, #312]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005816:	e001      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 809e 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800582e:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6593      	str	r3, [r2, #88]	; 0x58
 8005850:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800585c:	2301      	movs	r3, #1
 800585e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005860:	4b3a      	ldr	r3, [pc, #232]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a39      	ldr	r2, [pc, #228]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586c:	f7fc fbc6 	bl	8001ffc <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005872:	e009      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fc fbc2 	bl	8001ffc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	74fb      	strb	r3, [r7, #19]
        break;
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005888:	4b30      	ldr	r3, [pc, #192]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ef      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d15a      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d019      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058e2:	4a19      	ldr	r2, [pc, #100]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc fb82 	bl	8001ffc <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	e00b      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fc fb7e 	bl	8001ffc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d902      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	74fb      	strb	r3, [r7, #19]
            break;
 8005912:	e006      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ec      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005936:	4904      	ldr	r1, [pc, #16]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800593e:	e009      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	74bb      	strb	r3, [r7, #18]
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005954:	7c7b      	ldrb	r3, [r7, #17]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595a:	4b9e      	ldr	r3, [pc, #632]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	4a9d      	ldr	r2, [pc, #628]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005972:	4b98      	ldr	r3, [pc, #608]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f023 0203 	bic.w	r2, r3, #3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	4994      	ldr	r1, [pc, #592]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005994:	4b8f      	ldr	r3, [pc, #572]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f023 020c 	bic.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	498c      	ldr	r1, [pc, #560]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b6:	4b87      	ldr	r3, [pc, #540]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	4983      	ldr	r1, [pc, #524]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059d8:	4b7e      	ldr	r3, [pc, #504]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	497b      	ldr	r1, [pc, #492]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059fa:	4b76      	ldr	r3, [pc, #472]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	4972      	ldr	r1, [pc, #456]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1c:	4b6d      	ldr	r3, [pc, #436]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	496a      	ldr	r1, [pc, #424]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a3e:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	4961      	ldr	r1, [pc, #388]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a60:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6e:	4959      	ldr	r1, [pc, #356]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a82:	4b54      	ldr	r3, [pc, #336]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	4950      	ldr	r1, [pc, #320]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	4948      	ldr	r1, [pc, #288]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ac6:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005acc:	f023 0203 	bic.w	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	493f      	ldr	r1, [pc, #252]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d028      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af6:	4937      	ldr	r1, [pc, #220]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b08:	4b32      	ldr	r3, [pc, #200]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b12:	60d3      	str	r3, [r2, #12]
 8005b14:	e011      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b1e:	d10c      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	2101      	movs	r1, #1
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f8a4 	bl	8005c74 <RCCEx_PLLSAI1_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005b36:	7cfb      	ldrb	r3, [r7, #19]
 8005b38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d028      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b46:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	491f      	ldr	r1, [pc, #124]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b64:	d106      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b70:	60d3      	str	r3, [r2, #12]
 8005b72:	e011      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f875 	bl	8005c74 <RCCEx_PLLSAI1_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02b      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc2:	d109      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a02      	ldr	r2, [pc, #8]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bce:	60d3      	str	r3, [r2, #12]
 8005bd0:	e014      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3304      	adds	r3, #4
 8005be6:	2101      	movs	r1, #1
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f843 	bl	8005c74 <RCCEx_PLLSAI1_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01c      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c08:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	4916      	ldr	r1, [pc, #88]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f820 	bl	8005c74 <RCCEx_PLLSAI1_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5c:	4904      	ldr	r1, [pc, #16]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000

08005c74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c82:	4b74      	ldr	r3, [pc, #464]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d018      	beq.n	8005cc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c8e:	4b71      	ldr	r3, [pc, #452]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0203 	and.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d10d      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ca6:	4b6b      	ldr	r3, [pc, #428]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d047      	beq.n	8005d4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
 8005cbe:	e044      	b.n	8005d4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d018      	beq.n	8005cfa <RCCEx_PLLSAI1_Config+0x86>
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d825      	bhi.n	8005d18 <RCCEx_PLLSAI1_Config+0xa4>
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d002      	beq.n	8005cd6 <RCCEx_PLLSAI1_Config+0x62>
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d009      	beq.n	8005ce8 <RCCEx_PLLSAI1_Config+0x74>
 8005cd4:	e020      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11d      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce6:	e01a      	b.n	8005d1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ce8:	4b5a      	ldr	r3, [pc, #360]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d116      	bne.n	8005d22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf8:	e013      	b.n	8005d22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cfa:	4b56      	ldr	r3, [pc, #344]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10f      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d06:	4b53      	ldr	r3, [pc, #332]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d16:	e006      	b.n	8005d26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e004      	b.n	8005d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d1e:	bf00      	nop
 8005d20:	e002      	b.n	8005d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10d      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d2e:	4b49      	ldr	r3, [pc, #292]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6819      	ldr	r1, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	430b      	orrs	r3, r1
 8005d44:	4943      	ldr	r1, [pc, #268]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d17c      	bne.n	8005e4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d50:	4b40      	ldr	r3, [pc, #256]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d5c:	f7fc f94e 	bl	8001ffc <HAL_GetTick>
 8005d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d62:	e009      	b.n	8005d78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d64:	f7fc f94a 	bl	8001ffc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d902      	bls.n	8005d78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	73fb      	strb	r3, [r7, #15]
        break;
 8005d76:	e005      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d78:	4b36      	ldr	r3, [pc, #216]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ef      	bne.n	8005d64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d15f      	bne.n	8005e4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d110      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d90:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6892      	ldr	r2, [r2, #8]
 8005da0:	0211      	lsls	r1, r2, #8
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	06d2      	lsls	r2, r2, #27
 8005da8:	430a      	orrs	r2, r1
 8005daa:	492a      	ldr	r1, [pc, #168]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]
 8005db0:	e027      	b.n	8005e02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d112      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db8:	4b26      	ldr	r3, [pc, #152]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6892      	ldr	r2, [r2, #8]
 8005dc8:	0211      	lsls	r1, r2, #8
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6912      	ldr	r2, [r2, #16]
 8005dce:	0852      	lsrs	r2, r2, #1
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	0552      	lsls	r2, r2, #21
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	491f      	ldr	r1, [pc, #124]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	610b      	str	r3, [r1, #16]
 8005ddc:	e011      	b.n	8005e02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005de6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6892      	ldr	r2, [r2, #8]
 8005dee:	0211      	lsls	r1, r2, #8
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6952      	ldr	r2, [r2, #20]
 8005df4:	0852      	lsrs	r2, r2, #1
 8005df6:	3a01      	subs	r2, #1
 8005df8:	0652      	lsls	r2, r2, #25
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	4915      	ldr	r1, [pc, #84]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0e:	f7fc f8f5 	bl	8001ffc <HAL_GetTick>
 8005e12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e14:	e009      	b.n	8005e2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e16:	f7fc f8f1 	bl	8001ffc <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d902      	bls.n	8005e2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	73fb      	strb	r3, [r7, #15]
          break;
 8005e28:	e005      	b.n	8005e36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ef      	beq.n	8005e16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4903      	ldr	r1, [pc, #12]	; (8005e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000

08005e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e049      	b.n	8005efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fb fea0 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f000 f9ec 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d001      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e040      	b.n	8005fa2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <HAL_TIM_Base_Start_IT+0xa8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00e      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0x58>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d009      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0x58>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a18      	ldr	r2, [pc, #96]	; (8005fb4 <HAL_TIM_Base_Start_IT+0xac>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0x58>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d115      	bne.n	8005f8c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d015      	beq.n	8005f9e <HAL_TIM_Base_Start_IT+0x96>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d011      	beq.n	8005f9e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	e008      	b.n	8005f9e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e000      	b.n	8005fa0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	00010007 	.word	0x00010007

08005fc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a1a      	ldr	r2, [r3, #32]
 8005fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10f      	bne.n	8006008 <HAL_TIM_Base_Stop_IT+0x48>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a1a      	ldr	r2, [r3, #32]
 8005fee:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <HAL_TIM_Base_Stop_IT+0x48>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01b      	beq.n	8006082 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0202 	mvn.w	r2, #2
 8006052:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8e4 	bl	8006236 <HAL_TIM_IC_CaptureCallback>
 800606e:	e005      	b.n	800607c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8d6 	bl	8006222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8e7 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01b      	beq.n	80060ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0204 	mvn.w	r2, #4
 800609e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8be 	bl	8006236 <HAL_TIM_IC_CaptureCallback>
 80060ba:	e005      	b.n	80060c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8b0 	bl	8006222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8c1 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01b      	beq.n	800611a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0208 	mvn.w	r2, #8
 80060ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2204      	movs	r2, #4
 80060f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f898 	bl	8006236 <HAL_TIM_IC_CaptureCallback>
 8006106:	e005      	b.n	8006114 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f88a 	bl	8006222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f89b 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d020      	beq.n	8006166 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0210 	mvn.w	r2, #16
 8006136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2208      	movs	r2, #8
 800613c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f872 	bl	8006236 <HAL_TIM_IC_CaptureCallback>
 8006152:	e005      	b.n	8006160 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f864 	bl	8006222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f875 	bl	800624a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f06f 0201 	mvn.w	r2, #1
 8006182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fb fae5 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00c      	beq.n	80061ae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f949 	bl	8006440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f941 	bl	8006454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f834 	bl	800625e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0220 	mvn.w	r2, #32
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f909 	bl	800642c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <TIM_Base_SetConfig+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x28>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x28>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <TIM_Base_SetConfig+0xd0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a23      	ldr	r2, [pc, #140]	; (8006340 <TIM_Base_SetConfig+0xcc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00f      	beq.n	80062d6 <TIM_Base_SetConfig+0x62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d00b      	beq.n	80062d6 <TIM_Base_SetConfig+0x62>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a20      	ldr	r2, [pc, #128]	; (8006344 <TIM_Base_SetConfig+0xd0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <TIM_Base_SetConfig+0x62>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <TIM_Base_SetConfig+0xd4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_Base_SetConfig+0x62>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	; (800634c <TIM_Base_SetConfig+0xd8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d108      	bne.n	80062e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <TIM_Base_SetConfig+0xcc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0xb0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <TIM_Base_SetConfig+0xd4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0xb0>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a0b      	ldr	r2, [pc, #44]	; (800634c <TIM_Base_SetConfig+0xd8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d103      	bne.n	800632c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	615a      	str	r2, [r3, #20]
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40000400 	.word	0x40000400
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e054      	b.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a24      	ldr	r2, [pc, #144]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006398:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a17      	ldr	r2, [pc, #92]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d009      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a13      	ldr	r2, [pc, #76]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a11      	ldr	r2, [pc, #68]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10c      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40000400 	.word	0x40000400
 8006428:	40014000 	.word	0x40014000

0800642c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e040      	b.n	80064fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb fc08 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb38 	bl	8006b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8af 	bl	8006618 <UART_SetConfig>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01b      	b.n	80064fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fbb7 	bl	8006c68 <UART_CheckIdleState>
 80064fa:	4603      	mov	r3, r0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006518:	2b20      	cmp	r3, #32
 800651a:	d178      	bne.n	800660e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_UART_Transmit+0x24>
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e071      	b.n	8006610 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2221      	movs	r2, #33	; 0x21
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653a:	f7fb fd5f 	bl	8001ffc <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d108      	bne.n	800656c <HAL_UART_Transmit+0x68>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e003      	b.n	8006574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006574:	e030      	b.n	80065d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fc19 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e03c      	b.n	8006610 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	881a      	ldrh	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a8:	b292      	uxth	r2, r2
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3302      	adds	r3, #2
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e008      	b.n	80065c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b292      	uxth	r2, r2
 80065be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1c8      	bne.n	8006576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fbe2 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e005      	b.n	8006610 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800661c:	b08a      	sub	sp, #40	; 0x28
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	431a      	orrs	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	4313      	orrs	r3, r2
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4ba5      	ldr	r3, [pc, #660]	; (80068dc <UART_SetConfig+0x2c4>)
 8006648:	4013      	ands	r3, r2
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006650:	430b      	orrs	r3, r1
 8006652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a9a      	ldr	r2, [pc, #616]	; (80068e0 <UART_SetConfig+0x2c8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	4313      	orrs	r3, r2
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a91      	ldr	r2, [pc, #580]	; (80068e4 <UART_SetConfig+0x2cc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d126      	bne.n	80066f0 <UART_SetConfig+0xd8>
 80066a2:	4b91      	ldr	r3, [pc, #580]	; (80068e8 <UART_SetConfig+0x2d0>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d81b      	bhi.n	80066e8 <UART_SetConfig+0xd0>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xa0>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066d9 	.word	0x080066d9
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e0d6      	b.n	800687e <UART_SetConfig+0x266>
 80066d0:	2302      	movs	r3, #2
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e0d2      	b.n	800687e <UART_SetConfig+0x266>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	e0ce      	b.n	800687e <UART_SetConfig+0x266>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e0ca      	b.n	800687e <UART_SetConfig+0x266>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e0c6      	b.n	800687e <UART_SetConfig+0x266>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a7d      	ldr	r2, [pc, #500]	; (80068ec <UART_SetConfig+0x2d4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d138      	bne.n	800676c <UART_SetConfig+0x154>
 80066fa:	4b7b      	ldr	r3, [pc, #492]	; (80068e8 <UART_SetConfig+0x2d0>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b0c      	cmp	r3, #12
 8006706:	d82d      	bhi.n	8006764 <UART_SetConfig+0x14c>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0xf8>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006745 	.word	0x08006745
 8006714:	08006765 	.word	0x08006765
 8006718:	08006765 	.word	0x08006765
 800671c:	08006765 	.word	0x08006765
 8006720:	08006755 	.word	0x08006755
 8006724:	08006765 	.word	0x08006765
 8006728:	08006765 	.word	0x08006765
 800672c:	08006765 	.word	0x08006765
 8006730:	0800674d 	.word	0x0800674d
 8006734:	08006765 	.word	0x08006765
 8006738:	08006765 	.word	0x08006765
 800673c:	08006765 	.word	0x08006765
 8006740:	0800675d 	.word	0x0800675d
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674a:	e098      	b.n	800687e <UART_SetConfig+0x266>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006752:	e094      	b.n	800687e <UART_SetConfig+0x266>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675a:	e090      	b.n	800687e <UART_SetConfig+0x266>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006762:	e08c      	b.n	800687e <UART_SetConfig+0x266>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676a:	e088      	b.n	800687e <UART_SetConfig+0x266>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5f      	ldr	r2, [pc, #380]	; (80068f0 <UART_SetConfig+0x2d8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d125      	bne.n	80067c2 <UART_SetConfig+0x1aa>
 8006776:	4b5c      	ldr	r3, [pc, #368]	; (80068e8 <UART_SetConfig+0x2d0>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006780:	2b30      	cmp	r3, #48	; 0x30
 8006782:	d016      	beq.n	80067b2 <UART_SetConfig+0x19a>
 8006784:	2b30      	cmp	r3, #48	; 0x30
 8006786:	d818      	bhi.n	80067ba <UART_SetConfig+0x1a2>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d00a      	beq.n	80067a2 <UART_SetConfig+0x18a>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d814      	bhi.n	80067ba <UART_SetConfig+0x1a2>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <UART_SetConfig+0x182>
 8006794:	2b10      	cmp	r3, #16
 8006796:	d008      	beq.n	80067aa <UART_SetConfig+0x192>
 8006798:	e00f      	b.n	80067ba <UART_SetConfig+0x1a2>
 800679a:	2300      	movs	r3, #0
 800679c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a0:	e06d      	b.n	800687e <UART_SetConfig+0x266>
 80067a2:	2302      	movs	r3, #2
 80067a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a8:	e069      	b.n	800687e <UART_SetConfig+0x266>
 80067aa:	2304      	movs	r3, #4
 80067ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b0:	e065      	b.n	800687e <UART_SetConfig+0x266>
 80067b2:	2308      	movs	r3, #8
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b8:	e061      	b.n	800687e <UART_SetConfig+0x266>
 80067ba:	2310      	movs	r3, #16
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c0:	e05d      	b.n	800687e <UART_SetConfig+0x266>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a4b      	ldr	r2, [pc, #300]	; (80068f4 <UART_SetConfig+0x2dc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d125      	bne.n	8006818 <UART_SetConfig+0x200>
 80067cc:	4b46      	ldr	r3, [pc, #280]	; (80068e8 <UART_SetConfig+0x2d0>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067d6:	2bc0      	cmp	r3, #192	; 0xc0
 80067d8:	d016      	beq.n	8006808 <UART_SetConfig+0x1f0>
 80067da:	2bc0      	cmp	r3, #192	; 0xc0
 80067dc:	d818      	bhi.n	8006810 <UART_SetConfig+0x1f8>
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	d00a      	beq.n	80067f8 <UART_SetConfig+0x1e0>
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d814      	bhi.n	8006810 <UART_SetConfig+0x1f8>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <UART_SetConfig+0x1d8>
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d008      	beq.n	8006800 <UART_SetConfig+0x1e8>
 80067ee:	e00f      	b.n	8006810 <UART_SetConfig+0x1f8>
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f6:	e042      	b.n	800687e <UART_SetConfig+0x266>
 80067f8:	2302      	movs	r3, #2
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e03e      	b.n	800687e <UART_SetConfig+0x266>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e03a      	b.n	800687e <UART_SetConfig+0x266>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e036      	b.n	800687e <UART_SetConfig+0x266>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e032      	b.n	800687e <UART_SetConfig+0x266>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a30      	ldr	r2, [pc, #192]	; (80068e0 <UART_SetConfig+0x2c8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d12a      	bne.n	8006878 <UART_SetConfig+0x260>
 8006822:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <UART_SetConfig+0x2d0>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800682c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006830:	d01a      	beq.n	8006868 <UART_SetConfig+0x250>
 8006832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006836:	d81b      	bhi.n	8006870 <UART_SetConfig+0x258>
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683c:	d00c      	beq.n	8006858 <UART_SetConfig+0x240>
 800683e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006842:	d815      	bhi.n	8006870 <UART_SetConfig+0x258>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <UART_SetConfig+0x238>
 8006848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684c:	d008      	beq.n	8006860 <UART_SetConfig+0x248>
 800684e:	e00f      	b.n	8006870 <UART_SetConfig+0x258>
 8006850:	2300      	movs	r3, #0
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006856:	e012      	b.n	800687e <UART_SetConfig+0x266>
 8006858:	2302      	movs	r3, #2
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e00e      	b.n	800687e <UART_SetConfig+0x266>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e00a      	b.n	800687e <UART_SetConfig+0x266>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e006      	b.n	800687e <UART_SetConfig+0x266>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e002      	b.n	800687e <UART_SetConfig+0x266>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <UART_SetConfig+0x2c8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	f040 808b 	bne.w	80069a0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800688a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800688e:	2b08      	cmp	r3, #8
 8006890:	d834      	bhi.n	80068fc <UART_SetConfig+0x2e4>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0x280>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068fd 	.word	0x080068fd
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068fd 	.word	0x080068fd
 80068a8:	080068cb 	.word	0x080068cb
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	080068d3 	.word	0x080068d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fe fee2 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 80068c0:	61f8      	str	r0, [r7, #28]
        break;
 80068c2:	e021      	b.n	8006908 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <UART_SetConfig+0x2e0>)
 80068c6:	61fb      	str	r3, [r7, #28]
        break;
 80068c8:	e01e      	b.n	8006908 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fe fe43 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 80068ce:	61f8      	str	r0, [r7, #28]
        break;
 80068d0:	e01a      	b.n	8006908 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d6:	61fb      	str	r3, [r7, #28]
        break;
 80068d8:	e016      	b.n	8006908 <UART_SetConfig+0x2f0>
 80068da:	bf00      	nop
 80068dc:	efff69f3 	.word	0xefff69f3
 80068e0:	40008000 	.word	0x40008000
 80068e4:	40013800 	.word	0x40013800
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40004400 	.word	0x40004400
 80068f0:	40004800 	.word	0x40004800
 80068f4:	40004c00 	.word	0x40004c00
 80068f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006906:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80fa 	beq.w	8006b04 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	429a      	cmp	r2, r3
 800691e:	d305      	bcc.n	800692c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006932:	e0e7      	b.n	8006b04 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2200      	movs	r2, #0
 8006938:	461c      	mov	r4, r3
 800693a:	4615      	mov	r5, r2
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	022b      	lsls	r3, r5, #8
 8006946:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800694a:	0222      	lsls	r2, r4, #8
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	6849      	ldr	r1, [r1, #4]
 8006950:	0849      	lsrs	r1, r1, #1
 8006952:	2000      	movs	r0, #0
 8006954:	4688      	mov	r8, r1
 8006956:	4681      	mov	r9, r0
 8006958:	eb12 0a08 	adds.w	sl, r2, r8
 800695c:	eb43 0b09 	adc.w	fp, r3, r9
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7f9 fc8d 	bl	8000290 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4613      	mov	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006984:	d308      	bcc.n	8006998 <UART_SetConfig+0x380>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698c:	d204      	bcs.n	8006998 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	60da      	str	r2, [r3, #12]
 8006996:	e0b5      	b.n	8006b04 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800699e:	e0b1      	b.n	8006b04 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a8:	d15d      	bne.n	8006a66 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80069aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d827      	bhi.n	8006a02 <UART_SetConfig+0x3ea>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x3a0>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	08006a03 	.word	0x08006a03
 80069c8:	080069f3 	.word	0x080069f3
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	08006a03 	.word	0x08006a03
 80069d4:	08006a03 	.word	0x08006a03
 80069d8:	080069fb 	.word	0x080069fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069dc:	f7fe fe52 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 80069e0:	61f8      	str	r0, [r7, #28]
        break;
 80069e2:	e014      	b.n	8006a0e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e4:	f7fe fe64 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 80069e8:	61f8      	str	r0, [r7, #28]
        break;
 80069ea:	e010      	b.n	8006a0e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <UART_SetConfig+0x508>)
 80069ee:	61fb      	str	r3, [r7, #28]
        break;
 80069f0:	e00d      	b.n	8006a0e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fe fdaf 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 80069f6:	61f8      	str	r0, [r7, #28]
        break;
 80069f8:	e009      	b.n	8006a0e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	61fb      	str	r3, [r7, #28]
        break;
 8006a00:	e005      	b.n	8006a0e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d077      	beq.n	8006b04 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005a      	lsls	r2, r3, #1
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	441a      	add	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b0f      	cmp	r3, #15
 8006a2e:	d916      	bls.n	8006a5e <UART_SetConfig+0x446>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a36:	d212      	bcs.n	8006a5e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f023 030f 	bic.w	r3, r3, #15
 8006a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	8afb      	ldrh	r3, [r7, #22]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	8afa      	ldrh	r2, [r7, #22]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e052      	b.n	8006b04 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a64:	e04e      	b.n	8006b04 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d827      	bhi.n	8006abe <UART_SetConfig+0x4a6>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x45c>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa9 	.word	0x08006aa9
 8006a80:	08006abf 	.word	0x08006abf
 8006a84:	08006aaf 	.word	0x08006aaf
 8006a88:	08006abf 	.word	0x08006abf
 8006a8c:	08006abf 	.word	0x08006abf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006ab7 	.word	0x08006ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a98:	f7fe fdf4 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	61f8      	str	r0, [r7, #28]
        break;
 8006a9e:	e014      	b.n	8006aca <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa0:	f7fe fe06 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e010      	b.n	8006aca <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <UART_SetConfig+0x508>)
 8006aaa:	61fb      	str	r3, [r7, #28]
        break;
 8006aac:	e00d      	b.n	8006aca <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fe fd51 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8006ab2:	61f8      	str	r0, [r7, #28]
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	61fb      	str	r3, [r7, #28]
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d019      	beq.n	8006b04 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	085a      	lsrs	r2, r3, #1
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	441a      	add	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b0f      	cmp	r3, #15
 8006ae8:	d909      	bls.n	8006afe <UART_SetConfig+0x4e6>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af0:	d205      	bcs.n	8006afe <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60da      	str	r2, [r3, #12]
 8006afc:	e002      	b.n	8006b04 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	; 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b1e:	bf00      	nop
 8006b20:	00f42400 	.word	0x00f42400

08006b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c22:	d10a      	bne.n	8006c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b098      	sub	sp, #96	; 0x60
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c78:	f7fb f9c0 	bl	8001ffc <HAL_GetTick>
 8006c7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d12e      	bne.n	8006cea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f88c 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d021      	beq.n	8006cea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e062      	b.n	8006db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d149      	bne.n	8006d8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d00:	2200      	movs	r2, #0
 8006d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f856 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d03c      	beq.n	8006d8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
 8006d32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e6      	bne.n	8006d12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d64:	61fa      	str	r2, [r7, #28]
 8006d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	617b      	str	r3, [r7, #20]
   return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e5      	bne.n	8006d44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e011      	b.n	8006db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3758      	adds	r7, #88	; 0x58
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc8:	e049      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d045      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fb f913 	bl	8001ffc <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e048      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d031      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d110      	bne.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f838 	bl	8006e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e029      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e38:	d111      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f81e 	bl	8006e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e00f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d0a6      	beq.n	8006dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b095      	sub	sp, #84	; 0x54
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
 8006eae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e6      	bne.n	8006e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e5      	bne.n	8006ec0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d118      	bne.n	8006f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0310 	bic.w	r3, r3, #16
 8006f10:	647b      	str	r3, [r7, #68]	; 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	613b      	str	r3, [r7, #16]
   return(result);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f42:	bf00      	nop
 8006f44:	3754      	adds	r7, #84	; 0x54
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <siprintf>:
 8006f50:	b40e      	push	{r1, r2, r3}
 8006f52:	b500      	push	{lr}
 8006f54:	b09c      	sub	sp, #112	; 0x70
 8006f56:	ab1d      	add	r3, sp, #116	; 0x74
 8006f58:	9002      	str	r0, [sp, #8]
 8006f5a:	9006      	str	r0, [sp, #24]
 8006f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f60:	4809      	ldr	r0, [pc, #36]	; (8006f88 <siprintf+0x38>)
 8006f62:	9107      	str	r1, [sp, #28]
 8006f64:	9104      	str	r1, [sp, #16]
 8006f66:	4909      	ldr	r1, [pc, #36]	; (8006f8c <siprintf+0x3c>)
 8006f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6c:	9105      	str	r1, [sp, #20]
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	a902      	add	r1, sp, #8
 8006f74:	f000 f9a0 	bl	80072b8 <_svfiprintf_r>
 8006f78:	9b02      	ldr	r3, [sp, #8]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	b01c      	add	sp, #112	; 0x70
 8006f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f84:	b003      	add	sp, #12
 8006f86:	4770      	bx	lr
 8006f88:	2000005c 	.word	0x2000005c
 8006f8c:	ffff0208 	.word	0xffff0208

08006f90 <memset>:
 8006f90:	4402      	add	r2, r0
 8006f92:	4603      	mov	r3, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <memset+0xa>
 8006f98:	4770      	bx	lr
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <memset+0x4>

08006fa0 <__errno>:
 8006fa0:	4b01      	ldr	r3, [pc, #4]	; (8006fa8 <__errno+0x8>)
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2000005c 	.word	0x2000005c

08006fac <__libc_init_array>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4d0d      	ldr	r5, [pc, #52]	; (8006fe4 <__libc_init_array+0x38>)
 8006fb0:	4c0d      	ldr	r4, [pc, #52]	; (8006fe8 <__libc_init_array+0x3c>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	d109      	bne.n	8006fd0 <__libc_init_array+0x24>
 8006fbc:	4d0b      	ldr	r5, [pc, #44]	; (8006fec <__libc_init_array+0x40>)
 8006fbe:	4c0c      	ldr	r4, [pc, #48]	; (8006ff0 <__libc_init_array+0x44>)
 8006fc0:	f000 fc6a 	bl	8007898 <_init>
 8006fc4:	1b64      	subs	r4, r4, r5
 8006fc6:	10a4      	asrs	r4, r4, #2
 8006fc8:	2600      	movs	r6, #0
 8006fca:	42a6      	cmp	r6, r4
 8006fcc:	d105      	bne.n	8006fda <__libc_init_array+0x2e>
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd4:	4798      	blx	r3
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7ee      	b.n	8006fb8 <__libc_init_array+0xc>
 8006fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fde:	4798      	blx	r3
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	e7f2      	b.n	8006fca <__libc_init_array+0x1e>
 8006fe4:	08007b10 	.word	0x08007b10
 8006fe8:	08007b10 	.word	0x08007b10
 8006fec:	08007b10 	.word	0x08007b10
 8006ff0:	08007b14 	.word	0x08007b14

08006ff4 <__retarget_lock_acquire_recursive>:
 8006ff4:	4770      	bx	lr

08006ff6 <__retarget_lock_release_recursive>:
 8006ff6:	4770      	bx	lr

08006ff8 <memcpy>:
 8006ff8:	440a      	add	r2, r1
 8006ffa:	4291      	cmp	r1, r2
 8006ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007000:	d100      	bne.n	8007004 <memcpy+0xc>
 8007002:	4770      	bx	lr
 8007004:	b510      	push	{r4, lr}
 8007006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800700a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800700e:	4291      	cmp	r1, r2
 8007010:	d1f9      	bne.n	8007006 <memcpy+0xe>
 8007012:	bd10      	pop	{r4, pc}

08007014 <_free_r>:
 8007014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007016:	2900      	cmp	r1, #0
 8007018:	d044      	beq.n	80070a4 <_free_r+0x90>
 800701a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701e:	9001      	str	r0, [sp, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f1a1 0404 	sub.w	r4, r1, #4
 8007026:	bfb8      	it	lt
 8007028:	18e4      	addlt	r4, r4, r3
 800702a:	f000 f8df 	bl	80071ec <__malloc_lock>
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <_free_r+0x94>)
 8007030:	9801      	ldr	r0, [sp, #4]
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	b933      	cbnz	r3, 8007044 <_free_r+0x30>
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6014      	str	r4, [r2, #0]
 800703a:	b003      	add	sp, #12
 800703c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007040:	f000 b8da 	b.w	80071f8 <__malloc_unlock>
 8007044:	42a3      	cmp	r3, r4
 8007046:	d908      	bls.n	800705a <_free_r+0x46>
 8007048:	6825      	ldr	r5, [r4, #0]
 800704a:	1961      	adds	r1, r4, r5
 800704c:	428b      	cmp	r3, r1
 800704e:	bf01      	itttt	eq
 8007050:	6819      	ldreq	r1, [r3, #0]
 8007052:	685b      	ldreq	r3, [r3, #4]
 8007054:	1949      	addeq	r1, r1, r5
 8007056:	6021      	streq	r1, [r4, #0]
 8007058:	e7ed      	b.n	8007036 <_free_r+0x22>
 800705a:	461a      	mov	r2, r3
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b10b      	cbz	r3, 8007064 <_free_r+0x50>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d9fa      	bls.n	800705a <_free_r+0x46>
 8007064:	6811      	ldr	r1, [r2, #0]
 8007066:	1855      	adds	r5, r2, r1
 8007068:	42a5      	cmp	r5, r4
 800706a:	d10b      	bne.n	8007084 <_free_r+0x70>
 800706c:	6824      	ldr	r4, [r4, #0]
 800706e:	4421      	add	r1, r4
 8007070:	1854      	adds	r4, r2, r1
 8007072:	42a3      	cmp	r3, r4
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	d1e0      	bne.n	800703a <_free_r+0x26>
 8007078:	681c      	ldr	r4, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	6053      	str	r3, [r2, #4]
 800707e:	440c      	add	r4, r1
 8007080:	6014      	str	r4, [r2, #0]
 8007082:	e7da      	b.n	800703a <_free_r+0x26>
 8007084:	d902      	bls.n	800708c <_free_r+0x78>
 8007086:	230c      	movs	r3, #12
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	e7d6      	b.n	800703a <_free_r+0x26>
 800708c:	6825      	ldr	r5, [r4, #0]
 800708e:	1961      	adds	r1, r4, r5
 8007090:	428b      	cmp	r3, r1
 8007092:	bf04      	itt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	bf04      	itt	eq
 800709c:	1949      	addeq	r1, r1, r5
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	6054      	str	r4, [r2, #4]
 80070a2:	e7ca      	b.n	800703a <_free_r+0x26>
 80070a4:	b003      	add	sp, #12
 80070a6:	bd30      	pop	{r4, r5, pc}
 80070a8:	200003d0 	.word	0x200003d0

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0e      	ldr	r6, [pc, #56]	; (80070e8 <sbrk_aligned+0x3c>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 fba6 	bl	8007808 <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fba1 	bl	8007808 <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d00a      	beq.n	80070e0 <sbrk_aligned+0x34>
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d007      	beq.n	80070e4 <sbrk_aligned+0x38>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 fb96 	bl	8007808 <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d101      	bne.n	80070e4 <sbrk_aligned+0x38>
 80070e0:	f04f 34ff 	mov.w	r4, #4294967295
 80070e4:	4620      	mov	r0, r4
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	200003d4 	.word	0x200003d4

080070ec <_malloc_r>:
 80070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f0:	1ccd      	adds	r5, r1, #3
 80070f2:	f025 0503 	bic.w	r5, r5, #3
 80070f6:	3508      	adds	r5, #8
 80070f8:	2d0c      	cmp	r5, #12
 80070fa:	bf38      	it	cc
 80070fc:	250c      	movcc	r5, #12
 80070fe:	2d00      	cmp	r5, #0
 8007100:	4607      	mov	r7, r0
 8007102:	db01      	blt.n	8007108 <_malloc_r+0x1c>
 8007104:	42a9      	cmp	r1, r5
 8007106:	d905      	bls.n	8007114 <_malloc_r+0x28>
 8007108:	230c      	movs	r3, #12
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	2600      	movs	r6, #0
 800710e:	4630      	mov	r0, r6
 8007110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007114:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071e8 <_malloc_r+0xfc>
 8007118:	f000 f868 	bl	80071ec <__malloc_lock>
 800711c:	f8d8 3000 	ldr.w	r3, [r8]
 8007120:	461c      	mov	r4, r3
 8007122:	bb5c      	cbnz	r4, 800717c <_malloc_r+0x90>
 8007124:	4629      	mov	r1, r5
 8007126:	4638      	mov	r0, r7
 8007128:	f7ff ffc0 	bl	80070ac <sbrk_aligned>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	4604      	mov	r4, r0
 8007130:	d155      	bne.n	80071de <_malloc_r+0xf2>
 8007132:	f8d8 4000 	ldr.w	r4, [r8]
 8007136:	4626      	mov	r6, r4
 8007138:	2e00      	cmp	r6, #0
 800713a:	d145      	bne.n	80071c8 <_malloc_r+0xdc>
 800713c:	2c00      	cmp	r4, #0
 800713e:	d048      	beq.n	80071d2 <_malloc_r+0xe6>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	4631      	mov	r1, r6
 8007144:	4638      	mov	r0, r7
 8007146:	eb04 0903 	add.w	r9, r4, r3
 800714a:	f000 fb5d 	bl	8007808 <_sbrk_r>
 800714e:	4581      	cmp	r9, r0
 8007150:	d13f      	bne.n	80071d2 <_malloc_r+0xe6>
 8007152:	6821      	ldr	r1, [r4, #0]
 8007154:	1a6d      	subs	r5, r5, r1
 8007156:	4629      	mov	r1, r5
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ffa7 	bl	80070ac <sbrk_aligned>
 800715e:	3001      	adds	r0, #1
 8007160:	d037      	beq.n	80071d2 <_malloc_r+0xe6>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	442b      	add	r3, r5
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	f8d8 3000 	ldr.w	r3, [r8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d038      	beq.n	80071e2 <_malloc_r+0xf6>
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	42a2      	cmp	r2, r4
 8007174:	d12b      	bne.n	80071ce <_malloc_r+0xe2>
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	e00f      	b.n	800719c <_malloc_r+0xb0>
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	1b52      	subs	r2, r2, r5
 8007180:	d41f      	bmi.n	80071c2 <_malloc_r+0xd6>
 8007182:	2a0b      	cmp	r2, #11
 8007184:	d917      	bls.n	80071b6 <_malloc_r+0xca>
 8007186:	1961      	adds	r1, r4, r5
 8007188:	42a3      	cmp	r3, r4
 800718a:	6025      	str	r5, [r4, #0]
 800718c:	bf18      	it	ne
 800718e:	6059      	strne	r1, [r3, #4]
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	bf08      	it	eq
 8007194:	f8c8 1000 	streq.w	r1, [r8]
 8007198:	5162      	str	r2, [r4, r5]
 800719a:	604b      	str	r3, [r1, #4]
 800719c:	4638      	mov	r0, r7
 800719e:	f104 060b 	add.w	r6, r4, #11
 80071a2:	f000 f829 	bl	80071f8 <__malloc_unlock>
 80071a6:	f026 0607 	bic.w	r6, r6, #7
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	1af2      	subs	r2, r6, r3
 80071ae:	d0ae      	beq.n	800710e <_malloc_r+0x22>
 80071b0:	1b9b      	subs	r3, r3, r6
 80071b2:	50a3      	str	r3, [r4, r2]
 80071b4:	e7ab      	b.n	800710e <_malloc_r+0x22>
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	d1dd      	bne.n	8007178 <_malloc_r+0x8c>
 80071bc:	f8c8 2000 	str.w	r2, [r8]
 80071c0:	e7ec      	b.n	800719c <_malloc_r+0xb0>
 80071c2:	4623      	mov	r3, r4
 80071c4:	6864      	ldr	r4, [r4, #4]
 80071c6:	e7ac      	b.n	8007122 <_malloc_r+0x36>
 80071c8:	4634      	mov	r4, r6
 80071ca:	6876      	ldr	r6, [r6, #4]
 80071cc:	e7b4      	b.n	8007138 <_malloc_r+0x4c>
 80071ce:	4613      	mov	r3, r2
 80071d0:	e7cc      	b.n	800716c <_malloc_r+0x80>
 80071d2:	230c      	movs	r3, #12
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	4638      	mov	r0, r7
 80071d8:	f000 f80e 	bl	80071f8 <__malloc_unlock>
 80071dc:	e797      	b.n	800710e <_malloc_r+0x22>
 80071de:	6025      	str	r5, [r4, #0]
 80071e0:	e7dc      	b.n	800719c <_malloc_r+0xb0>
 80071e2:	605b      	str	r3, [r3, #4]
 80071e4:	deff      	udf	#255	; 0xff
 80071e6:	bf00      	nop
 80071e8:	200003d0 	.word	0x200003d0

080071ec <__malloc_lock>:
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__malloc_lock+0x8>)
 80071ee:	f7ff bf01 	b.w	8006ff4 <__retarget_lock_acquire_recursive>
 80071f2:	bf00      	nop
 80071f4:	200003cc 	.word	0x200003cc

080071f8 <__malloc_unlock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__malloc_unlock+0x8>)
 80071fa:	f7ff befc 	b.w	8006ff6 <__retarget_lock_release_recursive>
 80071fe:	bf00      	nop
 8007200:	200003cc 	.word	0x200003cc

08007204 <__ssputs_r>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	688e      	ldr	r6, [r1, #8]
 800720a:	461f      	mov	r7, r3
 800720c:	42be      	cmp	r6, r7
 800720e:	680b      	ldr	r3, [r1, #0]
 8007210:	4682      	mov	sl, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4690      	mov	r8, r2
 8007216:	d82c      	bhi.n	8007272 <__ssputs_r+0x6e>
 8007218:	898a      	ldrh	r2, [r1, #12]
 800721a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800721e:	d026      	beq.n	800726e <__ssputs_r+0x6a>
 8007220:	6965      	ldr	r5, [r4, #20]
 8007222:	6909      	ldr	r1, [r1, #16]
 8007224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007228:	eba3 0901 	sub.w	r9, r3, r1
 800722c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007230:	1c7b      	adds	r3, r7, #1
 8007232:	444b      	add	r3, r9
 8007234:	106d      	asrs	r5, r5, #1
 8007236:	429d      	cmp	r5, r3
 8007238:	bf38      	it	cc
 800723a:	461d      	movcc	r5, r3
 800723c:	0553      	lsls	r3, r2, #21
 800723e:	d527      	bpl.n	8007290 <__ssputs_r+0x8c>
 8007240:	4629      	mov	r1, r5
 8007242:	f7ff ff53 	bl	80070ec <_malloc_r>
 8007246:	4606      	mov	r6, r0
 8007248:	b360      	cbz	r0, 80072a4 <__ssputs_r+0xa0>
 800724a:	6921      	ldr	r1, [r4, #16]
 800724c:	464a      	mov	r2, r9
 800724e:	f7ff fed3 	bl	8006ff8 <memcpy>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	6126      	str	r6, [r4, #16]
 8007260:	6165      	str	r5, [r4, #20]
 8007262:	444e      	add	r6, r9
 8007264:	eba5 0509 	sub.w	r5, r5, r9
 8007268:	6026      	str	r6, [r4, #0]
 800726a:	60a5      	str	r5, [r4, #8]
 800726c:	463e      	mov	r6, r7
 800726e:	42be      	cmp	r6, r7
 8007270:	d900      	bls.n	8007274 <__ssputs_r+0x70>
 8007272:	463e      	mov	r6, r7
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	4632      	mov	r2, r6
 8007278:	4641      	mov	r1, r8
 800727a:	f000 faab 	bl	80077d4 <memmove>
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	1b9b      	subs	r3, r3, r6
 8007282:	60a3      	str	r3, [r4, #8]
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	4433      	add	r3, r6
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	2000      	movs	r0, #0
 800728c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007290:	462a      	mov	r2, r5
 8007292:	f000 fac9 	bl	8007828 <_realloc_r>
 8007296:	4606      	mov	r6, r0
 8007298:	2800      	cmp	r0, #0
 800729a:	d1e0      	bne.n	800725e <__ssputs_r+0x5a>
 800729c:	6921      	ldr	r1, [r4, #16]
 800729e:	4650      	mov	r0, sl
 80072a0:	f7ff feb8 	bl	8007014 <_free_r>
 80072a4:	230c      	movs	r3, #12
 80072a6:	f8ca 3000 	str.w	r3, [sl]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	f04f 30ff 	mov.w	r0, #4294967295
 80072b6:	e7e9      	b.n	800728c <__ssputs_r+0x88>

080072b8 <_svfiprintf_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4698      	mov	r8, r3
 80072be:	898b      	ldrh	r3, [r1, #12]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	b09d      	sub	sp, #116	; 0x74
 80072c4:	4607      	mov	r7, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	d50e      	bpl.n	80072ea <_svfiprintf_r+0x32>
 80072cc:	690b      	ldr	r3, [r1, #16]
 80072ce:	b963      	cbnz	r3, 80072ea <_svfiprintf_r+0x32>
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	f7ff ff0b 	bl	80070ec <_malloc_r>
 80072d6:	6028      	str	r0, [r5, #0]
 80072d8:	6128      	str	r0, [r5, #16]
 80072da:	b920      	cbnz	r0, 80072e6 <_svfiprintf_r+0x2e>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295
 80072e4:	e0d0      	b.n	8007488 <_svfiprintf_r+0x1d0>
 80072e6:	2340      	movs	r3, #64	; 0x40
 80072e8:	616b      	str	r3, [r5, #20]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	2320      	movs	r3, #32
 80072f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f8:	2330      	movs	r3, #48	; 0x30
 80072fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074a0 <_svfiprintf_r+0x1e8>
 80072fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007302:	f04f 0901 	mov.w	r9, #1
 8007306:	4623      	mov	r3, r4
 8007308:	469a      	mov	sl, r3
 800730a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730e:	b10a      	cbz	r2, 8007314 <_svfiprintf_r+0x5c>
 8007310:	2a25      	cmp	r2, #37	; 0x25
 8007312:	d1f9      	bne.n	8007308 <_svfiprintf_r+0x50>
 8007314:	ebba 0b04 	subs.w	fp, sl, r4
 8007318:	d00b      	beq.n	8007332 <_svfiprintf_r+0x7a>
 800731a:	465b      	mov	r3, fp
 800731c:	4622      	mov	r2, r4
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ff6f 	bl	8007204 <__ssputs_r>
 8007326:	3001      	adds	r0, #1
 8007328:	f000 80a9 	beq.w	800747e <_svfiprintf_r+0x1c6>
 800732c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732e:	445a      	add	r2, fp
 8007330:	9209      	str	r2, [sp, #36]	; 0x24
 8007332:	f89a 3000 	ldrb.w	r3, [sl]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80a1 	beq.w	800747e <_svfiprintf_r+0x1c6>
 800733c:	2300      	movs	r3, #0
 800733e:	f04f 32ff 	mov.w	r2, #4294967295
 8007342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007346:	f10a 0a01 	add.w	sl, sl, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	9307      	str	r3, [sp, #28]
 800734e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007352:	931a      	str	r3, [sp, #104]	; 0x68
 8007354:	4654      	mov	r4, sl
 8007356:	2205      	movs	r2, #5
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	4850      	ldr	r0, [pc, #320]	; (80074a0 <_svfiprintf_r+0x1e8>)
 800735e:	f7f8 ff47 	bl	80001f0 <memchr>
 8007362:	9a04      	ldr	r2, [sp, #16]
 8007364:	b9d8      	cbnz	r0, 800739e <_svfiprintf_r+0xe6>
 8007366:	06d0      	lsls	r0, r2, #27
 8007368:	bf44      	itt	mi
 800736a:	2320      	movmi	r3, #32
 800736c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007370:	0711      	lsls	r1, r2, #28
 8007372:	bf44      	itt	mi
 8007374:	232b      	movmi	r3, #43	; 0x2b
 8007376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800737a:	f89a 3000 	ldrb.w	r3, [sl]
 800737e:	2b2a      	cmp	r3, #42	; 0x2a
 8007380:	d015      	beq.n	80073ae <_svfiprintf_r+0xf6>
 8007382:	9a07      	ldr	r2, [sp, #28]
 8007384:	4654      	mov	r4, sl
 8007386:	2000      	movs	r0, #0
 8007388:	f04f 0c0a 	mov.w	ip, #10
 800738c:	4621      	mov	r1, r4
 800738e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007392:	3b30      	subs	r3, #48	; 0x30
 8007394:	2b09      	cmp	r3, #9
 8007396:	d94d      	bls.n	8007434 <_svfiprintf_r+0x17c>
 8007398:	b1b0      	cbz	r0, 80073c8 <_svfiprintf_r+0x110>
 800739a:	9207      	str	r2, [sp, #28]
 800739c:	e014      	b.n	80073c8 <_svfiprintf_r+0x110>
 800739e:	eba0 0308 	sub.w	r3, r0, r8
 80073a2:	fa09 f303 	lsl.w	r3, r9, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	46a2      	mov	sl, r4
 80073ac:	e7d2      	b.n	8007354 <_svfiprintf_r+0x9c>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	1d19      	adds	r1, r3, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	9103      	str	r1, [sp, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfbb      	ittet	lt
 80073ba:	425b      	neglt	r3, r3
 80073bc:	f042 0202 	orrlt.w	r2, r2, #2
 80073c0:	9307      	strge	r3, [sp, #28]
 80073c2:	9307      	strlt	r3, [sp, #28]
 80073c4:	bfb8      	it	lt
 80073c6:	9204      	strlt	r2, [sp, #16]
 80073c8:	7823      	ldrb	r3, [r4, #0]
 80073ca:	2b2e      	cmp	r3, #46	; 0x2e
 80073cc:	d10c      	bne.n	80073e8 <_svfiprintf_r+0x130>
 80073ce:	7863      	ldrb	r3, [r4, #1]
 80073d0:	2b2a      	cmp	r3, #42	; 0x2a
 80073d2:	d134      	bne.n	800743e <_svfiprintf_r+0x186>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	9203      	str	r2, [sp, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfb8      	it	lt
 80073e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e4:	3402      	adds	r4, #2
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074b0 <_svfiprintf_r+0x1f8>
 80073ec:	7821      	ldrb	r1, [r4, #0]
 80073ee:	2203      	movs	r2, #3
 80073f0:	4650      	mov	r0, sl
 80073f2:	f7f8 fefd 	bl	80001f0 <memchr>
 80073f6:	b138      	cbz	r0, 8007408 <_svfiprintf_r+0x150>
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	eba0 000a 	sub.w	r0, r0, sl
 80073fe:	2240      	movs	r2, #64	; 0x40
 8007400:	4082      	lsls	r2, r0
 8007402:	4313      	orrs	r3, r2
 8007404:	3401      	adds	r4, #1
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	4825      	ldr	r0, [pc, #148]	; (80074a4 <_svfiprintf_r+0x1ec>)
 800740e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007412:	2206      	movs	r2, #6
 8007414:	f7f8 feec 	bl	80001f0 <memchr>
 8007418:	2800      	cmp	r0, #0
 800741a:	d038      	beq.n	800748e <_svfiprintf_r+0x1d6>
 800741c:	4b22      	ldr	r3, [pc, #136]	; (80074a8 <_svfiprintf_r+0x1f0>)
 800741e:	bb1b      	cbnz	r3, 8007468 <_svfiprintf_r+0x1b0>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	3307      	adds	r3, #7
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	3308      	adds	r3, #8
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742e:	4433      	add	r3, r6
 8007430:	9309      	str	r3, [sp, #36]	; 0x24
 8007432:	e768      	b.n	8007306 <_svfiprintf_r+0x4e>
 8007434:	fb0c 3202 	mla	r2, ip, r2, r3
 8007438:	460c      	mov	r4, r1
 800743a:	2001      	movs	r0, #1
 800743c:	e7a6      	b.n	800738c <_svfiprintf_r+0xd4>
 800743e:	2300      	movs	r3, #0
 8007440:	3401      	adds	r4, #1
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	4619      	mov	r1, r3
 8007446:	f04f 0c0a 	mov.w	ip, #10
 800744a:	4620      	mov	r0, r4
 800744c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007450:	3a30      	subs	r2, #48	; 0x30
 8007452:	2a09      	cmp	r2, #9
 8007454:	d903      	bls.n	800745e <_svfiprintf_r+0x1a6>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0c6      	beq.n	80073e8 <_svfiprintf_r+0x130>
 800745a:	9105      	str	r1, [sp, #20]
 800745c:	e7c4      	b.n	80073e8 <_svfiprintf_r+0x130>
 800745e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007462:	4604      	mov	r4, r0
 8007464:	2301      	movs	r3, #1
 8007466:	e7f0      	b.n	800744a <_svfiprintf_r+0x192>
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	462a      	mov	r2, r5
 800746e:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <_svfiprintf_r+0x1f4>)
 8007470:	a904      	add	r1, sp, #16
 8007472:	4638      	mov	r0, r7
 8007474:	f3af 8000 	nop.w
 8007478:	1c42      	adds	r2, r0, #1
 800747a:	4606      	mov	r6, r0
 800747c:	d1d6      	bne.n	800742c <_svfiprintf_r+0x174>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	065b      	lsls	r3, r3, #25
 8007482:	f53f af2d 	bmi.w	80072e0 <_svfiprintf_r+0x28>
 8007486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007488:	b01d      	add	sp, #116	; 0x74
 800748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	ab03      	add	r3, sp, #12
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	462a      	mov	r2, r5
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <_svfiprintf_r+0x1f4>)
 8007496:	a904      	add	r1, sp, #16
 8007498:	4638      	mov	r0, r7
 800749a:	f000 f879 	bl	8007590 <_printf_i>
 800749e:	e7eb      	b.n	8007478 <_svfiprintf_r+0x1c0>
 80074a0:	08007ad4 	.word	0x08007ad4
 80074a4:	08007ade 	.word	0x08007ade
 80074a8:	00000000 	.word	0x00000000
 80074ac:	08007205 	.word	0x08007205
 80074b0:	08007ada 	.word	0x08007ada

080074b4 <_printf_common>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	4616      	mov	r6, r2
 80074ba:	4699      	mov	r9, r3
 80074bc:	688a      	ldr	r2, [r1, #8]
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c4:	4293      	cmp	r3, r2
 80074c6:	bfb8      	it	lt
 80074c8:	4613      	movlt	r3, r2
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074d0:	4607      	mov	r7, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	b10a      	cbz	r2, 80074da <_printf_common+0x26>
 80074d6:	3301      	adds	r3, #1
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	0699      	lsls	r1, r3, #26
 80074de:	bf42      	ittt	mi
 80074e0:	6833      	ldrmi	r3, [r6, #0]
 80074e2:	3302      	addmi	r3, #2
 80074e4:	6033      	strmi	r3, [r6, #0]
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	f015 0506 	ands.w	r5, r5, #6
 80074ec:	d106      	bne.n	80074fc <_printf_common+0x48>
 80074ee:	f104 0a19 	add.w	sl, r4, #25
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	6832      	ldr	r2, [r6, #0]
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc26      	bgt.n	800754a <_printf_common+0x96>
 80074fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007500:	1e13      	subs	r3, r2, #0
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	bf18      	it	ne
 8007506:	2301      	movne	r3, #1
 8007508:	0692      	lsls	r2, r2, #26
 800750a:	d42b      	bmi.n	8007564 <_printf_common+0xb0>
 800750c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007510:	4649      	mov	r1, r9
 8007512:	4638      	mov	r0, r7
 8007514:	47c0      	blx	r8
 8007516:	3001      	adds	r0, #1
 8007518:	d01e      	beq.n	8007558 <_printf_common+0xa4>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	f003 0306 	and.w	r3, r3, #6
 8007522:	2b04      	cmp	r3, #4
 8007524:	bf02      	ittt	eq
 8007526:	68e5      	ldreq	r5, [r4, #12]
 8007528:	6833      	ldreq	r3, [r6, #0]
 800752a:	1aed      	subeq	r5, r5, r3
 800752c:	68a3      	ldr	r3, [r4, #8]
 800752e:	bf0c      	ite	eq
 8007530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007534:	2500      	movne	r5, #0
 8007536:	4293      	cmp	r3, r2
 8007538:	bfc4      	itt	gt
 800753a:	1a9b      	subgt	r3, r3, r2
 800753c:	18ed      	addgt	r5, r5, r3
 800753e:	2600      	movs	r6, #0
 8007540:	341a      	adds	r4, #26
 8007542:	42b5      	cmp	r5, r6
 8007544:	d11a      	bne.n	800757c <_printf_common+0xc8>
 8007546:	2000      	movs	r0, #0
 8007548:	e008      	b.n	800755c <_printf_common+0xa8>
 800754a:	2301      	movs	r3, #1
 800754c:	4652      	mov	r2, sl
 800754e:	4649      	mov	r1, r9
 8007550:	4638      	mov	r0, r7
 8007552:	47c0      	blx	r8
 8007554:	3001      	adds	r0, #1
 8007556:	d103      	bne.n	8007560 <_printf_common+0xac>
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007560:	3501      	adds	r5, #1
 8007562:	e7c6      	b.n	80074f2 <_printf_common+0x3e>
 8007564:	18e1      	adds	r1, r4, r3
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	2030      	movs	r0, #48	; 0x30
 800756a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756e:	4422      	add	r2, r4
 8007570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007578:	3302      	adds	r3, #2
 800757a:	e7c7      	b.n	800750c <_printf_common+0x58>
 800757c:	2301      	movs	r3, #1
 800757e:	4622      	mov	r2, r4
 8007580:	4649      	mov	r1, r9
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	3001      	adds	r0, #1
 8007588:	d0e6      	beq.n	8007558 <_printf_common+0xa4>
 800758a:	3601      	adds	r6, #1
 800758c:	e7d9      	b.n	8007542 <_printf_common+0x8e>
	...

08007590 <_printf_i>:
 8007590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	7e0f      	ldrb	r7, [r1, #24]
 8007596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007598:	2f78      	cmp	r7, #120	; 0x78
 800759a:	4691      	mov	r9, r2
 800759c:	4680      	mov	r8, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	469a      	mov	sl, r3
 80075a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a6:	d807      	bhi.n	80075b8 <_printf_i+0x28>
 80075a8:	2f62      	cmp	r7, #98	; 0x62
 80075aa:	d80a      	bhi.n	80075c2 <_printf_i+0x32>
 80075ac:	2f00      	cmp	r7, #0
 80075ae:	f000 80d4 	beq.w	800775a <_printf_i+0x1ca>
 80075b2:	2f58      	cmp	r7, #88	; 0x58
 80075b4:	f000 80c0 	beq.w	8007738 <_printf_i+0x1a8>
 80075b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c0:	e03a      	b.n	8007638 <_printf_i+0xa8>
 80075c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c6:	2b15      	cmp	r3, #21
 80075c8:	d8f6      	bhi.n	80075b8 <_printf_i+0x28>
 80075ca:	a101      	add	r1, pc, #4	; (adr r1, 80075d0 <_printf_i+0x40>)
 80075cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d0:	08007629 	.word	0x08007629
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	080075b9 	.word	0x080075b9
 80075dc:	080075b9 	.word	0x080075b9
 80075e0:	080075b9 	.word	0x080075b9
 80075e4:	080075b9 	.word	0x080075b9
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	080075b9 	.word	0x080075b9
 80075f0:	080075b9 	.word	0x080075b9
 80075f4:	080075b9 	.word	0x080075b9
 80075f8:	080075b9 	.word	0x080075b9
 80075fc:	08007741 	.word	0x08007741
 8007600:	08007669 	.word	0x08007669
 8007604:	080076fb 	.word	0x080076fb
 8007608:	080075b9 	.word	0x080075b9
 800760c:	080075b9 	.word	0x080075b9
 8007610:	08007763 	.word	0x08007763
 8007614:	080075b9 	.word	0x080075b9
 8007618:	08007669 	.word	0x08007669
 800761c:	080075b9 	.word	0x080075b9
 8007620:	080075b9 	.word	0x080075b9
 8007624:	08007703 	.word	0x08007703
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007638:	2301      	movs	r3, #1
 800763a:	e09f      	b.n	800777c <_printf_i+0x1ec>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	0607      	lsls	r7, r0, #24
 8007642:	f103 0104 	add.w	r1, r3, #4
 8007646:	6029      	str	r1, [r5, #0]
 8007648:	d501      	bpl.n	800764e <_printf_i+0xbe>
 800764a:	681e      	ldr	r6, [r3, #0]
 800764c:	e003      	b.n	8007656 <_printf_i+0xc6>
 800764e:	0646      	lsls	r6, r0, #25
 8007650:	d5fb      	bpl.n	800764a <_printf_i+0xba>
 8007652:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007656:	2e00      	cmp	r6, #0
 8007658:	da03      	bge.n	8007662 <_printf_i+0xd2>
 800765a:	232d      	movs	r3, #45	; 0x2d
 800765c:	4276      	negs	r6, r6
 800765e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007662:	485a      	ldr	r0, [pc, #360]	; (80077cc <_printf_i+0x23c>)
 8007664:	230a      	movs	r3, #10
 8007666:	e012      	b.n	800768e <_printf_i+0xfe>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	0605      	lsls	r5, r0, #24
 8007672:	d501      	bpl.n	8007678 <_printf_i+0xe8>
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0xee>
 8007678:	0641      	lsls	r1, r0, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0xe4>
 800767c:	881e      	ldrh	r6, [r3, #0]
 800767e:	4853      	ldr	r0, [pc, #332]	; (80077cc <_printf_i+0x23c>)
 8007680:	2f6f      	cmp	r7, #111	; 0x6f
 8007682:	bf0c      	ite	eq
 8007684:	2308      	moveq	r3, #8
 8007686:	230a      	movne	r3, #10
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768e:	6865      	ldr	r5, [r4, #4]
 8007690:	60a5      	str	r5, [r4, #8]
 8007692:	2d00      	cmp	r5, #0
 8007694:	bfa2      	ittt	ge
 8007696:	6821      	ldrge	r1, [r4, #0]
 8007698:	f021 0104 	bicge.w	r1, r1, #4
 800769c:	6021      	strge	r1, [r4, #0]
 800769e:	b90e      	cbnz	r6, 80076a4 <_printf_i+0x114>
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	d04b      	beq.n	800773c <_printf_i+0x1ac>
 80076a4:	4615      	mov	r5, r2
 80076a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076aa:	fb03 6711 	mls	r7, r3, r1, r6
 80076ae:	5dc7      	ldrb	r7, [r0, r7]
 80076b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b4:	4637      	mov	r7, r6
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	460e      	mov	r6, r1
 80076ba:	d9f4      	bls.n	80076a6 <_printf_i+0x116>
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d10b      	bne.n	80076d8 <_printf_i+0x148>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07de      	lsls	r6, r3, #31
 80076c4:	d508      	bpl.n	80076d8 <_printf_i+0x148>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	4299      	cmp	r1, r3
 80076cc:	bfde      	ittt	le
 80076ce:	2330      	movle	r3, #48	; 0x30
 80076d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d8:	1b52      	subs	r2, r2, r5
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	f8cd a000 	str.w	sl, [sp]
 80076e0:	464b      	mov	r3, r9
 80076e2:	aa03      	add	r2, sp, #12
 80076e4:	4621      	mov	r1, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7ff fee4 	bl	80074b4 <_printf_common>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d14a      	bne.n	8007786 <_printf_i+0x1f6>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b004      	add	sp, #16
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f043 0320 	orr.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	4833      	ldr	r0, [pc, #204]	; (80077d0 <_printf_i+0x240>)
 8007704:	2778      	movs	r7, #120	; 0x78
 8007706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	6829      	ldr	r1, [r5, #0]
 800770e:	061f      	lsls	r7, r3, #24
 8007710:	f851 6b04 	ldr.w	r6, [r1], #4
 8007714:	d402      	bmi.n	800771c <_printf_i+0x18c>
 8007716:	065f      	lsls	r7, r3, #25
 8007718:	bf48      	it	mi
 800771a:	b2b6      	uxthmi	r6, r6
 800771c:	07df      	lsls	r7, r3, #31
 800771e:	bf48      	it	mi
 8007720:	f043 0320 	orrmi.w	r3, r3, #32
 8007724:	6029      	str	r1, [r5, #0]
 8007726:	bf48      	it	mi
 8007728:	6023      	strmi	r3, [r4, #0]
 800772a:	b91e      	cbnz	r6, 8007734 <_printf_i+0x1a4>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	f023 0320 	bic.w	r3, r3, #32
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	2310      	movs	r3, #16
 8007736:	e7a7      	b.n	8007688 <_printf_i+0xf8>
 8007738:	4824      	ldr	r0, [pc, #144]	; (80077cc <_printf_i+0x23c>)
 800773a:	e7e4      	b.n	8007706 <_printf_i+0x176>
 800773c:	4615      	mov	r5, r2
 800773e:	e7bd      	b.n	80076bc <_printf_i+0x12c>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	6826      	ldr	r6, [r4, #0]
 8007744:	6961      	ldr	r1, [r4, #20]
 8007746:	1d18      	adds	r0, r3, #4
 8007748:	6028      	str	r0, [r5, #0]
 800774a:	0635      	lsls	r5, r6, #24
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	d501      	bpl.n	8007754 <_printf_i+0x1c4>
 8007750:	6019      	str	r1, [r3, #0]
 8007752:	e002      	b.n	800775a <_printf_i+0x1ca>
 8007754:	0670      	lsls	r0, r6, #25
 8007756:	d5fb      	bpl.n	8007750 <_printf_i+0x1c0>
 8007758:	8019      	strh	r1, [r3, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	4615      	mov	r5, r2
 8007760:	e7bc      	b.n	80076dc <_printf_i+0x14c>
 8007762:	682b      	ldr	r3, [r5, #0]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	602a      	str	r2, [r5, #0]
 8007768:	681d      	ldr	r5, [r3, #0]
 800776a:	6862      	ldr	r2, [r4, #4]
 800776c:	2100      	movs	r1, #0
 800776e:	4628      	mov	r0, r5
 8007770:	f7f8 fd3e 	bl	80001f0 <memchr>
 8007774:	b108      	cbz	r0, 800777a <_printf_i+0x1ea>
 8007776:	1b40      	subs	r0, r0, r5
 8007778:	6060      	str	r0, [r4, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	2300      	movs	r3, #0
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007784:	e7aa      	b.n	80076dc <_printf_i+0x14c>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	462a      	mov	r2, r5
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	47d0      	blx	sl
 8007790:	3001      	adds	r0, #1
 8007792:	d0ad      	beq.n	80076f0 <_printf_i+0x160>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	079b      	lsls	r3, r3, #30
 8007798:	d413      	bmi.n	80077c2 <_printf_i+0x232>
 800779a:	68e0      	ldr	r0, [r4, #12]
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	4298      	cmp	r0, r3
 80077a0:	bfb8      	it	lt
 80077a2:	4618      	movlt	r0, r3
 80077a4:	e7a6      	b.n	80076f4 <_printf_i+0x164>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4632      	mov	r2, r6
 80077aa:	4649      	mov	r1, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	47d0      	blx	sl
 80077b0:	3001      	adds	r0, #1
 80077b2:	d09d      	beq.n	80076f0 <_printf_i+0x160>
 80077b4:	3501      	adds	r5, #1
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	9903      	ldr	r1, [sp, #12]
 80077ba:	1a5b      	subs	r3, r3, r1
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dcf2      	bgt.n	80077a6 <_printf_i+0x216>
 80077c0:	e7eb      	b.n	800779a <_printf_i+0x20a>
 80077c2:	2500      	movs	r5, #0
 80077c4:	f104 0619 	add.w	r6, r4, #25
 80077c8:	e7f5      	b.n	80077b6 <_printf_i+0x226>
 80077ca:	bf00      	nop
 80077cc:	08007ae5 	.word	0x08007ae5
 80077d0:	08007af6 	.word	0x08007af6

080077d4 <memmove>:
 80077d4:	4288      	cmp	r0, r1
 80077d6:	b510      	push	{r4, lr}
 80077d8:	eb01 0402 	add.w	r4, r1, r2
 80077dc:	d902      	bls.n	80077e4 <memmove+0x10>
 80077de:	4284      	cmp	r4, r0
 80077e0:	4623      	mov	r3, r4
 80077e2:	d807      	bhi.n	80077f4 <memmove+0x20>
 80077e4:	1e43      	subs	r3, r0, #1
 80077e6:	42a1      	cmp	r1, r4
 80077e8:	d008      	beq.n	80077fc <memmove+0x28>
 80077ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077f2:	e7f8      	b.n	80077e6 <memmove+0x12>
 80077f4:	4402      	add	r2, r0
 80077f6:	4601      	mov	r1, r0
 80077f8:	428a      	cmp	r2, r1
 80077fa:	d100      	bne.n	80077fe <memmove+0x2a>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007806:	e7f7      	b.n	80077f8 <memmove+0x24>

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d06      	ldr	r5, [pc, #24]	; (8007824 <_sbrk_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7fa fb10 	bl	8001e38 <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	200003c8 	.word	0x200003c8

08007828 <_realloc_r>:
 8007828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782c:	4680      	mov	r8, r0
 800782e:	4614      	mov	r4, r2
 8007830:	460e      	mov	r6, r1
 8007832:	b921      	cbnz	r1, 800783e <_realloc_r+0x16>
 8007834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	4611      	mov	r1, r2
 800783a:	f7ff bc57 	b.w	80070ec <_malloc_r>
 800783e:	b92a      	cbnz	r2, 800784c <_realloc_r+0x24>
 8007840:	f7ff fbe8 	bl	8007014 <_free_r>
 8007844:	4625      	mov	r5, r4
 8007846:	4628      	mov	r0, r5
 8007848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800784c:	f000 f81b 	bl	8007886 <_malloc_usable_size_r>
 8007850:	4284      	cmp	r4, r0
 8007852:	4607      	mov	r7, r0
 8007854:	d802      	bhi.n	800785c <_realloc_r+0x34>
 8007856:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800785a:	d812      	bhi.n	8007882 <_realloc_r+0x5a>
 800785c:	4621      	mov	r1, r4
 800785e:	4640      	mov	r0, r8
 8007860:	f7ff fc44 	bl	80070ec <_malloc_r>
 8007864:	4605      	mov	r5, r0
 8007866:	2800      	cmp	r0, #0
 8007868:	d0ed      	beq.n	8007846 <_realloc_r+0x1e>
 800786a:	42bc      	cmp	r4, r7
 800786c:	4622      	mov	r2, r4
 800786e:	4631      	mov	r1, r6
 8007870:	bf28      	it	cs
 8007872:	463a      	movcs	r2, r7
 8007874:	f7ff fbc0 	bl	8006ff8 <memcpy>
 8007878:	4631      	mov	r1, r6
 800787a:	4640      	mov	r0, r8
 800787c:	f7ff fbca 	bl	8007014 <_free_r>
 8007880:	e7e1      	b.n	8007846 <_realloc_r+0x1e>
 8007882:	4635      	mov	r5, r6
 8007884:	e7df      	b.n	8007846 <_realloc_r+0x1e>

08007886 <_malloc_usable_size_r>:
 8007886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788a:	1f18      	subs	r0, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfbc      	itt	lt
 8007890:	580b      	ldrlt	r3, [r1, r0]
 8007892:	18c0      	addlt	r0, r0, r3
 8007894:	4770      	bx	lr
	...

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
